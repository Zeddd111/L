GParam = {
  ts_id = "",
  ts_num = 0,
  ts_config = "",
  ts_log_m = "",
  ts_log_t = "",
  ts_mode = false,
  ts_levels = "",
  security = "",
  classcode = "",
  client_code = "",
  account = "",
  spot = 0,
  slip = 0,
  orderlifetime = 10,
  ordernumattempts = 0,
  positionlifetime = 1,
  flagtparam = false,
  flagstoptime = false,
  stoptime_arr = {},
  price_chart = "",
  etstart = "18:59:00",
  flabell = "",
  flabels = "",
  flabellvlB = "",
  flabellvlS = "",
  flabel = "",
  flabelst = "",
  labelmaxqty = 10,
  qty_arr = {100},
  lvl_slip = 0,
  ranull = 0,
  ranullplus = 0,
  deposize = 0,
  depo_perc = {100, 100},
  depo_download = {1},
  depo_stop = 0,
  rastop = 0,
  stopshift = 0,
  flagblock = false,
  flagdepobl = false,
  stopdepo = 0,
  flblock = false,
  flblockwrt = true,
  ts_blck = "",
  block_time = 0,
  block_qty = 100,
  block_stp = 100,
  block_stp2 = 0,
  fldepominus = false,
  kfdepominus = 1,
  block_pft = 100,
  timepos = 120,
  timelabel = 120,
  rashift = 0,
  qtysl = 0,
  flagchdepo = false,
  fldebug = false,
  lvl_arr = {2},
  cor_arr = {0},
  cor_shift = 0,
  flagstopti = false,
  flagstopap = false,
  flagstopbe = false,
  numtlong = 0,
  numtshort = 0,
  stop_chart = "",
  ind_shift = 0,
  trdchar = {},
  flagstopapp = false,
  flagautoadd = false,
  aaperc = {},
  flautoaddsh = false,
  aapercsh = {},
  timecnct = 0,
  stop_arr = {}
}
local PosParam = {
  pos_id = "",
  signalname = "",
  pricepos = 0,
  priceenter = 0,
  pricetrades = 0,
  valuetrades = 0,
  pricelong = 0,
  priceshort = 0,
  pricestop = 0,
  priceprofit = 0,
  pricelevel = 0,
  currqty = 0,
  profitpos = 0,
  valuepos = 0,
  currcountersc = 0,
  curr_day = 0,
  flagstop = false,
  flagstopmade = false,
  flagprofit = false,
  flagprofitmade = false,
  flagaddsignalmade = false,
  flaglong = false,
  flagshort = false,
  flaglongadd = false,
  flagshortadd = false,
  flaglongclose = false,
  flagshortclose = false,
  flbtlongclose = false,
  flbtshortclose = false,
  profitday = 0,
  profitdaybl = 0,
  profitpr = 0,
  flagposstoplifetime = 0,
  flagnull = true,
  totaldepo = 0,
  deposize = 0,
  depoblock = 0,
  totalqty = 0,
  startqty = {0, 0},
  clplusqty = 0,
  stop_arr = {},
  countblock = 0,
  timeblock = 0,
  timepos = 9999999999,
  tradedir = 1,
  flagwork = false,
  numpos = 0,
  flagsl = true,
  flagsl2 = true,
  qtysl = 0,
  fletstart = true,
  flagautoadd = false,
  flnullpos = true,
  aaperc = 0,
  aapercsh = 0,
  ssperc = 0,
  pricepeak = 0,
  stopshift = 0,
  flcoupgate = false,
  fldepominus = false,
  kfdepominus = 1,
  lvl_arr = 0,
  cor_arr = 0,
  pos_arr = {}
}
local is_run = false
local is_connect = false
local sec_arr = {
  1.0E-4,
  4,
  0,
  0,
  1
}
local tPos = {
  {
    x = 410,
    y = 464,
    width = 290,
    hight = 255
  },
  {
    x = 10,
    y = 464,
    width = 400,
    hight = 230
  },
  {
    x = 10,
    y = 664,
    width = 400,
    hight = 230
  },
  {
    x = 410,
    y = 720,
    width = 460,
    hight = 105
  }
}
local ta_id = {
  0,
  0,
  0,
  0
}
local trans_num = 1
local trans_active = {
  trans_id = 0,
  trans_checked = false,
  order_num = 0,
  order_checked = false,
  order_status = 0,
  order_qty = 0,
  curr_qty = 0,
  flagactive = false
}
local trade_active = {}
local label_pos = {}
local f_log = {}
local level_arr = {}
local barpostime = 0
local stoptime_l = {0, 0}
local numC = 0
local price_bar = 0
local stoptimepos = {b = 0, e = 0}
local flagstoptimestart = false
local flagposstoplifetime_l = -1
local flagposclose = false
local level_line = 0
local level_num = 0
local etstart = 0
local flagwork_l = false
local tradedir_l = 0
local flagtblock = false
local tblock_str = ""
local flaglabel = true
local flchklabel = true
local pricebu = 0
local fltimepos = true
local price_ind = 0
local flcoup = 0
local flaglabels = true
local timelabel = 0
local timecnct_s = 0
local flagsl = true
local startqty = 0
local btn_arr = {
  fl = false,
  qty = 0,
  dir = 0
}
local LIGHT_GREEN = RGB(204, 255, 204)
local LIGHT_RED = RGB(255, 204, 204)
local GREEN = RGB(70, 255, 70)
local RED = RGB(255, 70, 70)
local GRAY = RGB(216, 216, 216)
local HCOLOR = RGB(204, 150, 204)
local math_min = math.min
local math_max = math.max
local math_abs = math.abs
local math_ceil = math.ceil
local math_floor = math.floor
local string_gsub = string.gsub
local string_format = string.format
local string_match = string.match
local band = bit.band
local os_date = os.date
local os_time = os.time
local pairs = pairs
local tostring, tonumber = tostring, tonumber
local iif = function(cond, ifTrue, ifFalse)
  if cond then
    return ifTrue
  end
  return ifFalse
end
function toPrice(value)
  return string_format("%." .. string_format("%d", sec_arr[2]) .. "f", tonumber(value))
end
local math_floor2 = function(a, b)
  return a - a % b
end
local function table_tostring(tbl)
  if type(tbl) ~= "table" then
    return tostring(tbl)
  end
  local str, type_v = "", nil
  for k, v in pairs(tbl) do
    if type(k) == "string" then
      k = "[\"" .. k .. "\"]"
    else
      k = "[" .. k .. "]"
    end
    type_v = type(v)
    if type_v == "string" then
      str = str .. k .. "=\"" .. string_gsub(v, "\"", "\\\"") .. "\","
    elseif type_v == "number" then
      str = str .. k .. "=" .. v .. ","
    elseif type_v == "table" then
      str = str .. " " .. k .. "=" .. table_tostring(v) .. ", "
    elseif type_v == "boolean" then
      str = str .. k .. "=" .. tostring(v) .. ","
    else
      str = str .. k .. "=\"" .. string_gsub(tostring(v), "\"", "\\\"") .. "\","
    end
  end
  return "{" .. str .. "}"
end
local function _table_tofile(f_file, tbl)
  if f_file then
    f_file:write(table_tostring(tbl) .. "\n")
    f_file:flush()
  end
end
local function table_tofile(filename, tbl, fl)
  local err = ""
  local f, err = io.open(filename, "w")
  if not f then
    message(GParam.ts_id .. " " .. err)
  end
  if f then
    if fl == nil then
      f:write(table_tostring(tbl) .. "\n")
    else
      f:write(tostring(tbl) .. "\n")
    end
    f:flush()
    f:close()
  end
end
function dec(data)
  local b = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
  data = string_gsub(data, "[^" .. b .. "=]", "")
  return (data:gsub(".", function(x)
    if x == "=" then
      return ""
    end
    local r, f = "", b:find(x) - 1
    for i = 6, 1, -1 do
      r = r .. (f % 2 ^ i - f % 2 ^ (i - 1) > 0 and "1" or "0")
    end
    return r
  end):gsub("%d%d%d?%d?%d?%d?%d?%d?", function(x)
    if #x ~= 8 then
      return ""
    end
    local c = 0
    for i = 1, 8 do
      c = c + (x:sub(i, i) == "1" and 2 ^ (8 - i) or 0)
    end
    return string.char(c)
  end))
end
local function PosParam_load()
  local f, err = io.open(GParam.ts_config, "r")
  if not f then
    message(GParam.ts_id .. " " .. " " .. err)
    return false
  else
    PosParam = assert(loadstring("return " .. f:read("*a")))()
    f:close()
    return true
  end
end
local function PosParam_save()
  table_tofile(GParam.ts_config, PosParam)
end
local function WChkLabels()
  flaglabel = false
  while not flchklabel do
    sleep(10)
  end
end
local function AddLabelGraf(prc, vctr, sgnl, nla, lbl)
  local lbl_param = {}
  lbl_param.TEXT = ""
  lbl_param.IMAGE_PATH = ""
  lbl_param.ALIGNMENT = iif(vctr == "B", "BOTTOM", iif(vctr == "S", "TOP", "LEFT"))
  lbl_param.YVALUE = 0
  lbl_param.DATE = 0
  lbl_param.TIME = 0
  lbl_param.R = 0
  lbl_param.G = 0
  lbl_param.B = 0
  lbl_param.TRANSPARENCY = 0
  lbl_param.TRANSPARENT_BACKGROUND = iif(vctr == "Stp", 0, 1)
  lbl_param.FONT_FACE_NAME = "Arial"
  lbl_param.FONT_HEIGHT = 14
  lbl_param.HINT = GParam.ts_id .. " " .. vctr .. tostring(nla) .. "\n" .. toPrice(prc) .. iif(sgnl ~= "", "\n" .. tostring(sgnl), "")
  if vctr == "B" then
    lbl_param.IMAGE_PATH = GParam.flabell
    lbl_param.R = 0
    lbl_param.G = 255
    lbl_param.B = 0
  elseif vctr == "S" then
    lbl_param.IMAGE_PATH = GParam.flabels
    lbl_param.R = 255
    lbl_param.G = 0
    lbl_param.B = 0
  elseif vctr == "Lbl" then
    lbl_param.IMAGE_PATH = GParam.flabel
    lbl_param.R = 0
    lbl_param.G = 0
    lbl_param.B = 255
  elseif vctr == "Stp" then
    lbl_param.IMAGE_PATH = GParam.flabelst
    lbl_param.R = 0
    lbl_param.G = 0
    lbl_param.B = 255
  elseif vctr == "LB" then
    lbl_param.IMAGE_PATH = GParam.flabellvlB
    lbl_param.R = 0
    lbl_param.G = 255
    lbl_param.B = 0
  elseif vctr == "LS" then
    lbl_param.IMAGE_PATH = GParam.flabellvlS
    lbl_param.R = 255
    lbl_param.G = 0
    lbl_param.B = 0
  end
  lbl_param.YVALUE = tonumber(prc)
  lbl_param.DATE = tonumber(os_date("%Y%m%d", barpostime))
  lbl_param.TIME = tonumber(os_date("%H%M%S", barpostime))
  if vctr == "S" or vctr == "B" then
    label_pos[#label_pos + 1] = AddLabel(GParam.price_chart, lbl_param)
    lbl_param = nil
    if #label_pos > GParam.labelmaxqty then
      DelLabel(GParam.price_chart, label_pos[1])
      table.sremove(label_pos, 1)
    end
    lbl_param = nil
    return label_pos[#label_pos]
  elseif lbl == nil then
    local la = AddLabel(GParam.price_chart, lbl_param)
    lbl_param = nil
    return la
  else
    lbl_param.DATE = tonumber(lbl.date)
    lbl_param.TIME = tonumber(lbl.time)
    SetLabelParams(GParam.price_chart, lbl.label, lbl_param)
  end
end
local function Level_arr_save()
  table_tofile(GParam.ts_levels, level_arr)
end
local function Msg2Log(txt, message_type)
  if message_type ~= 0 and message_type ~= 2 and message_type ~= 3 then
    message_type = 1
  end
  if txt == nil then
    txt = "---"
  end
  local tData = os_date("%d.%m.%Y %X") .. ";" .. GParam.ts_id .. ";" .. PosParam.pos_id .. ";" .. message_type .. ";" .. txt .. ";\n"
  if f_log[1] then
    f_log[1]:write(tData)
    f_log[1]:flush()
  end
  tData = nil
end
local function change_corqty()
  local i = 1
  local flagcp = true
  while flagcp and i <= #GParam.cor_arr do
    if PosParam.cor_arr == GParam.cor_arr[i] then
      flagcp = false
    end
    i = i + 1
  end
  if flagcp or i > #GParam.cor_arr then
    i = 1
  end
  PosParam.cor_arr = GParam.cor_arr[i]
  SetCell(ta_id[2], 2, 2, tostring(PosParam.cor_arr))
end
local function change_lvlqty()
  local i = 1
  local flagcp = true
  while flagcp and i <= #GParam.lvl_arr do
    if PosParam.lvl_arr == GParam.lvl_arr[i] then
      flagcp = false
    end
    i = i + 1
  end
  if flagcp or i > #GParam.lvl_arr then
    i = 1
  end
  PosParam.lvl_arr = GParam.lvl_arr[i]
  SetCell(ta_id[2], 2, 4, tostring(PosParam.lvl_arr))
end
local function EditLabelStop(sprice, fl)
  local fl1 = false
  if fl then
    fl1 = flaglabel
    WChkLabels()
  end
  if level_arr[2][4] then
    sprice = tonumber(toPrice(sprice))
    level_arr[2][1] = sprice
    if flaglabels then
      DelLabel(GParam.price_chart, level_arr[2][5])
      level_arr[2][5] = AddLabelGraf(level_arr[2][1], "Stp", "", "Stop")
    end
  end
  if fl then
    flaglabel = fl1
  end
end
local function CheckStop()
  local last_arr = #level_arr
  if flaglabels and last_arr > 2 and PosParam.startqty[PosParam.tradedir] > 0 then
    local i = 1
    local last_arr = #level_arr
    local mprice = 0
    local sprice = 0
    local stop_size_l = GParam.rastop
    for i = 3, last_arr do
      if level_arr[i][7] == PosParam.tradedir then
        mprice = mprice + level_arr[i][1] * level_arr[i][3]
      end
    end
    if mprice > 0 then
      mprice = mprice / PosParam.startqty[PosParam.tradedir]
      if stop_size_l == 0 then
        i = sec_arr[1]
        if GParam.spot == 0 then
          i = tonumber(getParamEx(GParam.classcode, GParam.security, "STEPPRICE").param_value)
        end
        stop_size_l = GParam.depo_stop * GParam.deposize / (100 * PosParam.kfdepominus * math_abs(PosParam.startqty[PosParam.tradedir]) * i * sec_arr[5] / sec_arr[1])
      end
      if PosParam.tradedir == 1 then
        sprice = mprice - stop_size_l
      else
        sprice = mprice + stop_size_l
      end
      EditLabelStop(sprice, false)
    end
  end
end
local function change_qty(num)
  if num > 2 and level_arr[num - 1][4] then
    local qty_l = level_arr[num - 1][3]
    local i = 1
    local flagcp = true
    while flagcp and i <= #GParam.qty_arr do
      if level_arr[num - 1][2] == GParam.qty_arr[i] then
        flagcp = false
      end
      i = i + 1
    end
    if flagcp or i > #GParam.qty_arr then
      i = 1
    end
    level_arr[num - 1][2] = GParam.qty_arr[i]
    PosParam.startqty[level_arr[num - 1][7]] = PosParam.startqty[level_arr[num - 1][7]] - qty_l
    qty_l = math_floor(PosParam.totalqty * GParam.qty_arr[i] / 100)
    if qty_l == 0 then
      qty_l = 1
    end
    if qty_l > PosParam.totalqty - PosParam.startqty[level_arr[num - 1][7]] then
      qty_l = PosParam.totalqty - PosParam.startqty[level_arr[num - 1][7]]
    end
    level_arr[num - 1][3] = qty_l
    PosParam.startqty[level_arr[num - 1][7]] = PosParam.startqty[level_arr[num - 1][7]] + qty_l
    level_arr[num - 1][6] = qty_l / PosParam.totalqty * 100
    SetCell(ta_id[2], num, 2, tostring(level_arr[num - 1][2]))
    SetCell(ta_id[2], num, 3, tostring(level_arr[num - 1][3]))
    if PosParam.currqty == 0 then
      CheckStop()
    end
    Level_arr_save()
    PosParam_save()
    if level_arr[num - 1][7] == PosParam.tradedir then
      SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[level_arr[num - 1][7]]))
    end
  end
end
local function InitLvl12(fl)
  local l1 = 0
  local fl1 = false
  fl1 = flaglabel
  WChkLabels()
  DelAllLabels(GParam.price_chart)
  level_line = 0
  if fl then
    l1 = tonumber(getParamEx(GParam.classcode, GParam.security, "LAST").param_value)
  else
    l1 = level_arr[1][1]
  end
  level_arr = {}
  PosParam.startqty = {0, 0}
  level_arr[1] = {}
  level_arr[1][1] = l1
  level_arr[1][2] = 0
  level_arr[1][3] = 1
  level_arr[1][4] = PosParam.flagwork
  level_arr[1][6] = 0
  level_arr[1][7] = 0
  level_arr[2] = {}
  level_arr[2][1] = 0
  level_arr[2][2] = flcoup
  level_arr[2][3] = 0
  level_arr[2][4] = true
  level_arr[2][6] = 0
  level_arr[2][7] = 0
  flaglabel = fl1
end
local function AddLvlqty(trdir, qtyl)
  local qty_l = 0
  if qtyl == nil or qtyl == 0 then
    qty_l = math_floor(PosParam.totalqty * GParam.qty_arr[1] / 100)
  else
    qty_l = math_ceil(qtyl)
  end
  local qtyts = PosParam.totalqty - PosParam.startqty[trdir]
  if qty_l == 0 and qtyts > 0 then
    qty_l = 1
  elseif qtyts == 0 or qtyts > 0 and qtyts < qty_l then
    qty_l = qtyts
  end
  return qty_l
end
local function AddLvl(trdir, fl, qtyl)
  local price_lvl = 0
  local next_arr = #level_arr + 1
  local qty_l = AddLvlqty(trdir, qtyl)
  price_lvl = tonumber(getParamEx(GParam.classcode, GParam.security, "LAST").param_value)
  if next_arr < 3 or qty_l > 0 then
    level_arr[next_arr] = {}
    if next_arr == 1 then
      level_arr[next_arr][1] = price_lvl
      level_arr[next_arr][2] = 0
      level_arr[next_arr][3] = 1
      level_arr[next_arr][4] = PosParam.flagwork
      level_arr[next_arr][6] = 0
      level_arr[next_arr][7] = 0
    elseif next_arr == 2 then
      level_arr[next_arr][1] = 0
      level_arr[next_arr][2] = flcoup
      level_arr[next_arr][3] = 0
      level_arr[next_arr][4] = true
      level_arr[next_arr][6] = 0
      level_arr[next_arr][7] = 0
    else
      PosParam.startqty[trdir] = PosParam.startqty[trdir] + qty_l
      if PosParam.currqty == 0 then
        local minst = 1
        if next_arr == 3 then
          minst = 2
        end
        if trdir == 1 then
          if fl then
            level_arr[next_arr][1] = price_lvl
          else
            level_arr[next_arr][1] = level_arr[next_arr - minst][1] - GParam.rashift
          end
          level_arr[1][1] = level_arr[next_arr][1] + GParam.cor_shift
          SetCell(ta_id[2], 2, 1, toPrice(level_arr[1][1]))
        else
          if fl then
            level_arr[next_arr][1] = price_lvl
          else
            level_arr[next_arr][1] = level_arr[next_arr - minst][1] + GParam.rashift
          end
          level_arr[1][1] = level_arr[next_arr][1] - GParam.cor_shift
          SetCell(ta_id[2], 2, 1, toPrice(level_arr[1][1]))
        end
      else
        level_arr[next_arr][1] = price_lvl
      end
      level_arr[next_arr][2] = GParam.qty_arr[1]
      level_arr[next_arr][3] = qty_l
      level_arr[next_arr][4] = true
      level_arr[next_arr][6] = qty_l / PosParam.totalqty * 100
      level_arr[next_arr][7] = trdir
      PosParam_save()
    end
    InsertRow(ta_id[2], -1)
    SetCell(ta_id[2], next_arr + 1, 1, toPrice(level_arr[next_arr][1]))
    if next_arr == 1 then
      SetCell(ta_id[2], next_arr + 1, 2, tostring(PosParam.cor_arr))
      SetCell(ta_id[2], next_arr + 1, 3, iif(level_arr[next_arr][3] == 0, "\202\206\208\200\196\206\208", "\207\206\208\223\196\206\202"))
      SetColor(ta_id[2], 2, 3, GREEN, -1, GREEN, -1)
      SetCell(ta_id[2], next_arr + 1, 4, tostring(PosParam.lvl_arr))
      SetCell(ta_id[2], next_arr + 1, 5, "\207\206\209\210\208\206\200\210\220")
    elseif next_arr == 2 then
      SetCell(ta_id[2], next_arr + 1, 2, iif(PosParam.tradedir == 1, "\207\206\202\211\207\202\192", "\207\208\206\196\192\198\192"))
      SetColor(ta_id[2], 3, 2, iif(PosParam.tradedir == 1, GREEN, RED), -1, iif(PosParam.tradedir == 1, GREEN, RED), -1)
      SetCell(ta_id[2], next_arr + 1, 3, "\209\193\208\206\209")
      SetColor(ta_id[2], 2, 3, GREEN, -1, GREEN, -1)
      SetCell(ta_id[2], next_arr + 1, 4, iif(level_arr[next_arr][4], "\192\194\210\206\204\192\210", "\208\211\215\205\206\201"))
      SetCell(ta_id[2], next_arr + 1, 5, iif(PosParam.flcoupgate, "\207\197\208\197\194\206\208\206\210", "\194\206\208\206\210\192"))
    else
      SetCell(ta_id[2], next_arr + 1, 2, tostring(level_arr[next_arr][2]))
      SetCell(ta_id[2], next_arr + 1, 3, tostring(level_arr[next_arr][3]))
      SetCell(ta_id[2], next_arr + 1, 4, iif(level_arr[next_arr][4], "\208\224\225\238\247\232\233", "\206\242\240\224\225\238\242\224\237"))
      SetCell(ta_id[2], next_arr + 1, 5, "\211\196\192\203\200\210\220")
      if level_arr[next_arr][7] == 1 then
        SetCell(ta_id[2], next_arr + 1, 6, " L ")
        SetColor(ta_id[2], next_arr + 1, 6, GREEN, -1, GREEN, -1)
      else
        SetCell(ta_id[2], next_arr + 1, 6, " S ")
        SetColor(ta_id[2], next_arr + 1, 6, RED, -1, RED, -1)
      end
    end
    local color_r = iif(next_arr < 3, HCOLOR, iif(level_arr[next_arr][4], iif(level_arr[next_arr][7] == 1, LIGHT_GREEN, LIGHT_RED), GRAY))
    SetColor(ta_id[2], next_arr + 1, -1, color_r, -1, HCOLOR, -1)
    SetColor(ta_id[2], 3, 5, RED, -1, RED, -1)
    if flaglabels then
      local vctr = iif(next_arr == 1, "Lbl", iif(trdir == 1, "LB", "LS"))
      level_arr[next_arr][5] = AddLabelGraf(level_arr[next_arr][1], vctr, "", next_arr)
      if PosParam.currqty == 0 then
        if next_arr > 2 then
          DelLabel(GParam.price_chart, level_arr[1][5])
          level_arr[1][5] = AddLabelGraf(level_arr[1][1], "Lbl", "", 1)
        end
        CheckStop()
      end
    end
    Level_arr_save()
    if trdir == PosParam.tradedir then
      SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[PosParam.tradedir]))
    end
  end
end
local function EditLevelTbl(i)
  SetCell(ta_id[2], i + 1, 1, toPrice(level_arr[i][1]))
  SetCell(ta_id[2], i + 1, 2, tostring(level_arr[i][2]))
  SetCell(ta_id[2], i + 1, 3, tostring(level_arr[i][3]))
  SetCell(ta_id[2], i + 1, 4, iif(i == 1, tostring(PosParam.lvl_arr), iif(i == 2, iif(level_arr[i][4], "\192\194\210\206\204\192\210", "\208\211\215\205\206\201"), iif(level_arr[i][4], "\208\224\225\238\247\232\233", "\206\242\240\224\225\238\242\224\237"))))
  if i > 2 then
    if level_arr[i][7] == 1 then
      SetCell(ta_id[2], i + 1, 6, " L ")
      SetColor(ta_id[2], i + 1, 6, GREEN, -1, GREEN, -1)
    else
      SetCell(ta_id[2], i + 1, 6, " S ")
      SetColor(ta_id[2], i + 1, 6, RED, -1, RED, -1)
    end
  end
  local color_r = iif(i < 3, HCOLOR, iif(level_arr[i][4], iif(level_arr[i][7] == 1, LIGHT_GREEN, LIGHT_RED), GRAY))
  SetColor(ta_id[2], i + 1, -1, color_r, -1, HCOLOR, -1)
  Level_arr_save()
end
local function LevelWork()
  SetCell(ta_id[2], 1, 1, iif(PosParam.flagwork, "\194\202\203\222\215\197\205\206", "\194\219\202\203\222\215\197\205\206"))
  SetColor(ta_id[2], 1, 1, iif(PosParam.flagwork, GREEN, RED), -1, iif(PosParam.flagwork, GREEN, RED), -1)
end
local function AddLevelTbl(fl)
  local i = 1
  local next_arr = #level_arr
  local vctr = ""
  InsertRow(ta_id[2], -1)
  SetCell(ta_id[2], 1, 1, iif(PosParam.flagwork, "\194\202\203\222\215\197\205\206", "\194\219\202\203\222\215\197\205\206"))
  SetColor(ta_id[2], 1, 1, iif(PosParam.flagwork, GREEN, RED), -1, iif(PosParam.flagwork, GREEN, RED), -1)
  SetCell(ta_id[2], 1, 2, "\206\193\205.\204\197\210\202\200")
  SetColor(ta_id[2], 1, 2, GREEN, -1, GREEN, -1)
  SetCell(ta_id[2], 1, 3, "\196\206\193.\203\206\205\195")
  SetColor(ta_id[2], 1, 3, GREEN, -1, GREEN, -1)
  SetCell(ta_id[2], 1, 4, "\196\206\193.\216\206\208\210")
  SetColor(ta_id[2], 1, 4, RED, -1, RED, -1)
  SetCell(ta_id[2], 1, 5, "\199\192\202\208\219\210\220")
  SetColor(ta_id[2], 1, 5, RED, -1, RED, -1)
  SetCell(ta_id[2], 1, 6, "---")
  SetColor(ta_id[2], 1, 6, RED, -1, RED, -1)
  if level_arr ~= nil and level_arr ~= "" and level_arr ~= {} then
    for i = 1, next_arr do
      InsertRow(ta_id[2], -1)
      SetCell(ta_id[2], i + 1, 1, toPrice(level_arr[i][1]))
      if i == 1 then
        SetCell(ta_id[2], i + 1, 2, tostring(PosParam.cor_arr))
        SetCell(ta_id[2], i + 1, 3, iif(level_arr[i][3] == 0, "\202\206\208\200\196\206\208", "\207\206\208\223\196\206\202"))
        SetColor(ta_id[2], 2, 3, GREEN, -1, GREEN, -1)
        SetCell(ta_id[2], i + 1, 4, tostring(PosParam.lvl_arr))
        SetCell(ta_id[2], i + 1, 5, "\207\206\209\210\208\206\200\210\220")
      elseif i == 2 then
        SetCell(ta_id[2], i + 1, 2, iif(PosParam.tradedir == 1, "\207\206\202\211\207\202\192", "\207\208\206\196\192\198\192"))
        SetColor(ta_id[2], 3, 2, iif(PosParam.tradedir == 1, GREEN, RED), -1, iif(PosParam.tradedir == 1, GREEN, RED), -1)
        SetCell(ta_id[2], i + 1, 3, "\209\193\208\206\209")
        SetColor(ta_id[2], 2, 3, GREEN, -1, GREEN, -1)
        SetCell(ta_id[2], i + 1, 4, iif(level_arr[i][4], "\192\194\210\206\204\192\210", "\208\211\215\205\206\201"))
        SetCell(ta_id[2], i + 1, 5, iif(PosParam.flcoupgate, "\207\197\208\197\194\206\208\206\210", "\194\206\208\206\210\192"))
      else
        SetCell(ta_id[2], i + 1, 2, tostring(level_arr[i][2]))
        SetCell(ta_id[2], i + 1, 3, tostring(level_arr[i][3]))
        SetCell(ta_id[2], i + 1, 4, iif(level_arr[i][4], "\208\224\225\238\247\232\233", "\206\242\240\224\225\238\242\224\237"))
        SetCell(ta_id[2], i + 1, 5, "\211\196\192\203\200\210\220")
        if level_arr[i][7] == 1 then
          SetCell(ta_id[2], i + 1, 6, " L ")
          SetColor(ta_id[2], i + 1, 6, GREEN, -1, GREEN, -1)
        else
          SetCell(ta_id[2], i + 1, 6, " S ")
          SetColor(ta_id[2], i + 1, 6, RED, -1, RED, -1)
        end
      end
      local color_r = iif(i < 3, HCOLOR, iif(level_arr[i][4], iif(level_arr[i][7] == 1, LIGHT_GREEN, LIGHT_RED), GRAY))
      SetColor(ta_id[2], i + 1, -1, color_r, -1, HCOLOR, -1)
      SetColor(ta_id[2], 3, 5, RED, -1, RED, -1)
      if fl and flaglabels then
        if i == 2 then
          level_arr[2][5] = AddLabelGraf(level_arr[2][1], "Stp", "", "Stop")
        elseif i == 1 and (flagsl or not PosParam.flagwork) or level_arr[i][4] then
          vctr = iif(i == 1, "Lbl", iif(level_arr[i][7] == 1, "LB", "LS"))
          level_arr[i][5] = AddLabelGraf(level_arr[i][1], vctr, "", iif(i == 1, 0, i - 2))
        end
      end
    end
    Level_arr_save()
  end
end
local function dellevel_arr()
  local i = level_arr[level_line - 1][7]
  DelLabel(GParam.price_chart, level_arr[level_line - 1][5])
  PosParam.startqty[i] = PosParam.startqty[i] - level_arr[level_line - 1][3]
  table.sremove(level_arr, level_line - 1)
  CheckStop()
  level_line = 0
  Clear(ta_id[2])
  AddLevelTbl(false)
  PosParam_save()
  SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[i]))
end
local function delalllevel_arr()
  InitLvl12(true)
  Clear(ta_id[2])
  AddLevelTbl(true)
  PosParam_save()
  SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[PosParam.tradedir]))
end
local function AddLvlCor()
  local last_arr = #level_arr
  local i = 0
  if PosParam.cor_arr == 0 then
    if last_arr >= 3 then
      DelAllLabels(GParam.price_chart)
      local lvlsh = math.pow(2, PosParam.lvl_arr)
      local tsbar = level_arr[1][1] - level_arr[3][1]
      if last_arr > 3 then
        for i = last_arr, 4, -1 do
          table.sremove(level_arr, i)
        end
      end
      local qty_l0 = math_floor(PosParam.totalqty / PosParam.lvl_arr + 0.5)
      local qtyts = 0
      level_arr[3][2] = 100 / PosParam.lvl_arr
      level_arr[3][3] = qty_l0
      PosParam.startqty[PosParam.tradedir] = qty_l0
      for i = 4, PosParam.lvl_arr + 2 do
        qty_l = qty_l0
        qtyts = PosParam.totalqty - PosParam.startqty[PosParam.tradedir]
        if qty_l == 0 and qtyts > 0 then
          qty_l = 1
        elseif qtyts == 0 or qtyts > 0 and qtyts < qty_l then
          qty_l = qtyts
        end
        if 0 < qty_l then
          level_arr[i] = {}
          PosParam.startqty[PosParam.tradedir] = PosParam.startqty[PosParam.tradedir] + qty_l
          level_arr[i][1] = level_arr[i - 1][1] + tsbar * math.pow(2, PosParam.lvl_arr - i + 3) / lvlsh
          level_arr[i][2] = level_arr[3][2]
          level_arr[i][3] = qty_l
          level_arr[i][4] = true
          level_arr[i][6] = qty_l / PosParam.totalqty * 100
          level_arr[i][7] = PosParam.tradedir
        end
      end
      Clear(ta_id[2])
      AddLevelTbl(true)
      PosParam_save()
      SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[PosParam.tradedir]))
    end
  elseif last_arr >= 2 then
    InitLvl12(false)
    if PosParam.totalqty < PosParam.lvl_arr then
      PosParam.lvl_arr = PosParam.totalqty
    end
    if PosParam.lvl_arr > 1 then
      local qty_l0 = math_floor(PosParam.totalqty / PosParam.lvl_arr + 0.5)
      local qty_p = 100 / PosParam.lvl_arr
      local qtyts = 0
      local cor_sh = PosParam.cor_arr / (PosParam.lvl_arr - 1)
      local sign = 1
      if PosParam.tradedir == 2 then
        sign = -1
      end
      PosParam.startqty[PosParam.tradedir] = 0
      for i = 3, PosParam.lvl_arr + 2 do
        qty_l = qty_l0
        qtyts = PosParam.totalqty - PosParam.startqty[PosParam.tradedir]
        if qty_l == 0 and qtyts > 0 then
          qty_l = 1
        elseif qtyts == 0 or qtyts > 0 and qtyts < qty_l then
          qty_l = qtyts
        end
        if 0 < qty_l then
          level_arr[i] = {}
          PosParam.startqty[PosParam.tradedir] = PosParam.startqty[PosParam.tradedir] + qty_l
          level_arr[i][1] = level_arr[1][1] + sign * cor_sh * (i - 3)
          level_arr[i][2] = qty_p
          level_arr[i][3] = qty_l
          level_arr[i][4] = true
          level_arr[i][6] = qty_l / PosParam.totalqty * 100
          level_arr[i][7] = PosParam.tradedir
        end
      end
      level_arr[1][1] = level_arr[1][1] + sign * (cor_sh * (PosParam.lvl_arr - 1) + GParam.cor_shift)
      Clear(ta_id[2])
      AddLevelTbl(true)
      PosParam_save()
      SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[PosParam.tradedir]))
    end
  end
end
local function EditStopTbl(i)
  SetCell(ta_id[3], i, 1, toPrice(PosParam.stop_arr[i][5]))
  SetCell(ta_id[3], i, 2, toPrice(PosParam.stop_arr[i][4]))
  SetCell(ta_id[3], i, 3, toPrice(PosParam.stop_arr[i][1]))
  SetCell(ta_id[3], i, 4, iif(PosParam.stop_arr[i][6], "\208\192\193\206\215\200\201", "\206\210\208\192\193\206\210\192\205"))
  SetCell(ta_id[3], i, 5, iif(PosParam.stop_arr[i][7] == 0, "\204\200\205\211\209", iif(PosParam.stop_arr[i][7] == 1, "\193/\211", "\207\203\222\209")))
  SetColor(ta_id[3], i, -1, iif(PosParam.stop_arr[i][6], LIGHT_GREEN, GRAY), -1, iif(PosParam.stop_arr[i][4], LIGHT_GREEN, GRAY), -1)
end
local function AddStopTbl()
  local i = 1
  local next_arr = #PosParam.stop_arr
  if PosParam.stop_arr ~= nil and PosParam.stop_arr ~= "" and PosParam.stop_arr ~= {} then
    for i = 1, next_arr do
      InsertRow(ta_id[3], -1)
      SetCell(ta_id[3], i, 1, toPrice(PosParam.stop_arr[i][5]))
      SetCell(ta_id[3], i, 2, toPrice(PosParam.stop_arr[i][4]))
      SetCell(ta_id[3], i, 3, toPrice(PosParam.stop_arr[i][1]))
      SetCell(ta_id[3], i, 4, iif(PosParam.stop_arr[i][6], "\208\192\193\206\215\200\201", "\206\210\208\192\193\206\210\192\205"))
      SetCell(ta_id[3], i, 5, iif(PosParam.stop_arr[i][7] == 0, "\204\200\205\211\209", iif(PosParam.stop_arr[i][7] == 1, "\193/\211", "\207\203\222\209")))
      SetColor(ta_id[3], i, -1, iif(PosParam.stop_arr[i][6], LIGHT_GREEN, GRAY), -1, iif(PosParam.stop_arr[i][4], LIGHT_GREEN, GRAY), -1)
    end
  end
end
local function EditStopArr()
  local nNum = 0
  local last_stop = #PosParam.stop_arr
  local qsstop = 0
  local qssum = 0
  local qssumf = 0
  local currq = math_abs(PosParam.currqty)
  local k = 1
  local nNumF = 0
  if GParam.flagstopapp and (0 < PosParam.currqty and PosParam.pricetrades > PosParam.priceenter or 0 > PosParam.currqty and PosParam.pricetrades < PosParam.priceenter) then
    local sst = 0
    for nNum = 1, last_stop do
      if nNumF > 0 or PosParam.stop_arr[nNum][6] then
        if nNumF == 0 then
          nNumF = nNum
        end
        sst = sst + PosParam.stop_arr[nNum][1]
      end
    end
    if nNumF == 0 then
      nNumF = last_stop
    end
    if sst == 0 then
      sst = 100
    end
    k = 100 / sst
  else
    nNumF = 1
  end
  local qstopf = 0
  local qstop = 0
  for nNum = nNumF, last_stop do
    if nNum == last_stop then
      qstopf = currq
    else
      qstopf = k * PosParam.stop_arr[nNum][1] * currq / 100
    end
    qssumf = qssumf + qstopf
    qstop = math_ceil(qssumf - qssum)
    qssum = qssum + qstop
    if qsstop >= currq then
      PosParam.stop_arr[nNum][4] = 0
      PosParam.stop_arr[nNum][6] = false
    elseif currq < qsstop + qstop then
      PosParam.stop_arr[nNum][4] = currq - qsstop
      PosParam.stop_arr[nNum][6] = true
    elseif qstop == 0 then
      PosParam.stop_arr[nNum][4] = 1
      PosParam.stop_arr[nNum][6] = true
    else
      PosParam.stop_arr[nNum][4] = qstop
      PosParam.stop_arr[nNum][6] = true
    end
    qsstop = qsstop + PosParam.stop_arr[nNum][4]
    EditStopTbl(nNum)
  end
end
local function InitStopArr()
  if PosParam.currqty == 0 then
    local i = 1
    local next_arr = #GParam.stop_arr
    local stop_t = 0
    if GParam.stop_arr ~= nil and GParam.stop_arr ~= "" and next_arr > 0 then
      PosParam.stop_arr = {}
      for i = 1, next_arr do
        PosParam.stop_arr[i] = {}
        PosParam.stop_arr[i][1] = GParam.stop_arr[i][1]
        stop_t = stop_t + GParam.stop_arr[i][1]
        PosParam.stop_arr[i][2] = GParam.stop_arr[i][2]
        PosParam.stop_arr[i][3] = GParam.stop_arr[i][3]
        PosParam.stop_arr[i][4] = 0
        PosParam.stop_arr[i][5] = 0
        PosParam.stop_arr[i][6] = true
        PosParam.stop_arr[i][7] = 0
      end
      if stop_t < 100 then
        i = next_arr + 1
        PosParam.stop_arr[i] = {}
        PosParam.stop_arr[i][1] = 100 - stop_t
        PosParam.stop_arr[i][2] = -1
        PosParam.stop_arr[i][3] = 0
        PosParam.stop_arr[i][4] = 0
        PosParam.stop_arr[i][5] = 0
        PosParam.stop_arr[i][6] = true
        PosParam.stop_arr[i][7] = 0
      end
      Clear(ta_id[3])
      AddStopTbl()
    end
  end
end
local function EditStopArrL(qty, oper, fl)
  local koef = 0
  local flstopl = false
  local sprice = 0
  local stop_size_l = GParam.rastop
  local qty_l = qty
  if qty_l > PosParam.totalqty then
    qty_l = PosParam.totalqty
  end
  if qty_l > 0 then
    local nNum = 0
    local last_stop = #PosParam.stop_arr
    if stop_size_l == 0 then
      koef = sec_arr[1]
      if GParam.spot == 0 then
        koef = tonumber(getParamEx(GParam.classcode, GParam.security, "STEPPRICE").param_value)
      end
      stop_size_l = GParam.depo_stop * GParam.deposize / (100 * PosParam.kfdepominus * math_abs(PosParam.currqty) * koef * sec_arr[5] / sec_arr[1])
    end
    if level_arr[2][4] then
      if PosParam.flagautoadd then
        sprice = PosParam.priceenter + GParam.ranullplus
        if oper < 0 then
          sprice = PosParam.priceenter - GParam.ranullplus
        end
        PosParam.flagautoadd = false
      elseif PosParam.flnullpos then
        sprice = PosParam.priceenter - stop_size_l
        if oper < 0 then
          sprice = PosParam.priceenter + stop_size_l
        end
      else
        sprice = level_arr[2][1]
      end
    else
      sprice = level_arr[2][1]
      flstopl = true
    end
    if sprice > 0 then
      sprice = tonumber(toPrice(sprice))
      PosParam.pricestop = sprice
      SetCell(ta_id[2], 3, 1, toPrice(level_arr[2][1]))
      for nNum = 1, last_stop do
        if level_arr[2][4] then
          PosParam.stop_arr[nNum][5] = sprice
          flstopl = true
          PosParam.stop_arr[nNum][7] = 0
        elseif 2 > PosParam.stop_arr[nNum][7] or not PosParam.stop_arr[nNum][6] then
          PosParam.stop_arr[nNum][5] = sprice
        end
        if not fl then
          EditStopTbl(nNum)
        end
      end
    end
  else
    stop_size_l = 0
  end
  if fl then
    EditStopArr()
  end
  if stop_size_l > 0 then
    if 0 < GParam.ranull[1] then
      stop_size_l = GParam.ranull[1]
    end
    if PosParam.tradedir == 1 then
      pricebu = PosParam.priceenter + stop_size_l
    else
      pricebu = PosParam.priceenter - stop_size_l
    end
    PosParam.priceprofit = pricebu
    if flstopl then
      EditLabelStop(sprice, fl)
      SetCell(ta_id[2], 3, 1, toPrice(level_arr[2][1]))
    end
  elseif flaglabels then
    DelLabel(GParam.price_chart, level_arr[2][5])
  end
end
local function CheckLabels()
  if flaglabel then
    flchklabel = false
    if flaglabels then
      if os_time() <= timelabel then
        local lbl_param = {}
        local i = 1
        local vctr = ""
        local lbl = {}
        if level_arr ~= nil and level_arr ~= "" and level_arr ~= {} then
          local last_arr = #level_arr
          if last_arr > 1 then
            for i = 1, last_arr do
              if i < 3 or level_arr[i][4] then
                lbl_param = GetLabelParams(GParam.price_chart, level_arr[i][5])
                if lbl_param ~= nil and lbl_param.yvalue ~= nil then
                  if math_floor2(tonumber(lbl_param.yvalue), sec_arr[1]) ~= math_floor2(level_arr[i][1], sec_arr[1]) then
                    if i == 2 and PosParam.currqty ~= 0 then
                      if level_arr[2][4] and GParam.fldebug then
                        Msg2Log("\209\242\238\239 \225\251\235 \226\240\243\247\237\243\254 \241\228\226\232\237\243\242 \241\238 \231\237\224\247\229\237\232\255 " .. toPrice(level_arr[2][1]), 2)
                      end
                      level_arr[2][1] = math_floor2(tonumber(lbl_param.yvalue), sec_arr[1])
                      level_arr[2][4] = false
                      SetCell(ta_id[2], 3, 4, "\208\211\215\205\206\201")
                      EditStopArrL(math_abs(PosParam.currqty), PosParam.currqty, false)
                    elseif i ~= 2 then
                      if i == 1 then
                        PosParam.flagsl2 = true
                        PosParam.qtysl = 0
                        if flagsl then
                          SetCell(ta_id[1], 14, 2, tostring(PosParam.qtysl) .. " \232\231 " .. tostring(GParam.qtysl))
                        end
                      end
                      level_arr[i][1] = math_floor2(tonumber(lbl_param.yvalue), sec_arr[1])
                      SetCell(ta_id[2], i + 1, 1, toPrice(level_arr[i][1]))
                      if PosParam.currqty == 0 then
                        CheckStop()
                      end
                    end
                    Level_arr_save()
                  end
                else
                  if i == 2 then
                    level_arr[2][5] = AddLabelGraf(level_arr[2][1], "Stp", "", "Stop")
                  elseif i == 1 and (flagsl or not PosParam.flagwork) or level_arr[i][4] then
                    vctr = iif(i == 1, "Lbl", iif(level_arr[i][7] == 1, "LB", "LS"))
                    level_arr[i][5] = AddLabelGraf(level_arr[i][1], vctr, "", iif(i == 1, 0, i - 2))
                  end
                  Level_arr_save()
                end
              end
            end
          end
        end
        lbl_param = nil
        lbl = nil
      else
        flaglabels = false
        DelAllLabels(GParam.price_chart)
      end
    end
  end
  flchklabel = true
end
local function event_callback_message(t_id, msg, par1, par2)
  if par1 > 1 then
    if msg == QTABLE_LBUTTONDBLCLK then
      if par1 == 3 then
        if par2 == 2 then
          if PosParam.currqty == 0 then
            PosParam.tradedir = iif(PosParam.tradedir == 1, 2, 1)
            SetCell(ta_id[2], 3, 2, iif(PosParam.tradedir == 1, "\207\206\202\211\207\202\192", "\207\208\206\196\192\198\192"))
            SetColor(ta_id[2], 3, 2, iif(PosParam.tradedir == 1, GREEN, RED), -1, iif(PosParam.tradedir == 1, GREEN, RED), -1)
            SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[PosParam.tradedir]))
            if flaglabels then
              CheckStop()
            end
            if GParam.fldebug then
              Msg2Log("\200\231\236\229\237\232\235\238\241\252 \237\224\239\240\224\226\235\229\237\232\229, \242\229\234\243\249\229\229 " .. iif(PosParam.tradedir == 1, "\207\206\202\211\207\202\192", "\207\208\206\196\192\198\192"), 2)
            end
            PosParam_save()
          else
            message("\196\235\255 \241\236\229\237\251 \237\224\239\240\224\226\235\229\237\232\255 \242\238\240\227\238\226\235\232 \239\240\229\228\226\224\240\232\242\229\235\252\237\238 \239\238\235\237\238\241\242\252\254 \231\224\234\240\238\233\242\229 \242\229\234\243\249\243\254 \239\238\231\232\246\232\254!")
          end
          return
        elseif par2 == 3 then
          level_arr[2][4] = true
          SetCell(ta_id[2], 3, 4, "\192\194\210\206\204\192\210")
          if GParam.fldebug then
            Msg2Log("\209\242\238\239 \225\251\235 \241\225\240\238\248\229\237 \226 \239\238\231\232\246\232\254 \192\194\210\206\204\192\210", 2)
          end
          Level_arr_save()
          return
        elseif par2 == 5 then
          PosParam.flcoupgate = not PosParam.flcoupgate
          if GParam.fldebug then
            Msg2Log("\200\231\236\229\237\229\237 \240\229\230\232\236 \240\224\225\238\242\251 \243\240\238\226\237\229\233 \237\224 " .. iif(PosParam.flcoupgate, "\207\197\208\197\194\206\208\206\210", "\194\206\208\206\210\192"), 2)
          end
          SetCell(ta_id[2], 3, 5, iif(PosParam.flcoupgate, "\207\197\208\197\194\206\208\206\210", "\194\206\208\206\210\192"))
          PosParam_save()
          return
        end
      elseif par1 > 3 and (par2 == 2 or par2 == 3) then
        if level_arr[par1 - 1][4] and level_arr[par1 - 1][1] > 0 then
          change_qty(par1)
        end
        return
      end
      if PosParam.currqty == 0 then
        if par1 == 2 and par2 == 2 then
          change_corqty()
          Level_arr_save()
          return
        elseif par1 == 2 and par2 == 3 then
          level_arr[1][3] = iif(level_arr[1][3] == 0, 1, 0)
          SetCell(ta_id[2], 2, 3, iif(level_arr[1][3] == 0, "\202\206\208\200\196\206\208", "\207\206\208\223\196\206\202"))
          if GParam.fldebug then
            Msg2Log("\200\231\236\229\237\232\235\241\255 \237\224\225\238\240 \239\238\231\232\246\232\232, \242\229\234\243\249\232\233 " .. iif(level_arr[1][3] == 0, "\202\206\208\200\196\206\208", "\207\206\208\223\196\206\202"), 2)
          end
          Level_arr_save()
          return
        elseif par1 == 2 and par2 == 4 then
          change_lvlqty()
          Level_arr_save()
          return
        elseif par1 == 2 and par2 == 5 then
          WChkLabels()
          AddLvlCor()
          if GParam.fldebug then
            Msg2Log("\192\226\242\238\236\224\242\232\247\229\241\234\238\229 \239\238\241\242\240\238\229\237\232\229 \243\240\238\226\237\229\233 \226 \234\238\240\232\228\238\240\229", 2)
          end
          flaglabel = true
          return
        elseif par1 > 3 and par2 == 5 then
          if par1 - 1 <= #level_arr and (level_arr[par1 - 1][4] or level_arr[par1 - 1][3] == 0) then
            WChkLabels()
            level_line = par1
            if GParam.fldebug then
              Msg2Log("\211\228\224\235\229\237\229 \243\240\238\226\237\255 " .. tostring(level_line), 2)
            end
            dellevel_arr()
            flaglabel = true
          end
          return
        end
      end
    end
  elseif msg == QTABLE_LBUTTONDBLCLK then
    if par2 == 1 then
      PosParam.flagwork = iif(PosParam.flagwork, false, true)
      if GParam.fldebug then
        Msg2Log("\200\231\236\229\237\232\235\241\255 \241\242\224\242\243\241 \240\238\225\238\242\224, \242\229\234\243\249\232\233 " .. tostring(PosParam.flagwork), 2)
      end
      LevelWork()
      PosParam_save()
      return
    end
    if par2 == 2 then
      local i = 0
      local vctr = ""
      local l_arr = #level_arr
      WChkLabels()
      DelAllLabels(GParam.price_chart)
      if not PosParam.flagwork and PosParam.currqty == 0 and l_arr == 2 then
        level_arr[1][1] = tonumber(getParamEx(GParam.classcode, GParam.security, "LAST").param_value)
        SetCell(ta_id[2], 2, 1, toPrice(level_arr[1][1]))
        Level_arr_save()
      end
      for i = 1, l_arr do
        if i == 2 then
          level_arr[2][5] = AddLabelGraf(level_arr[2][1], "Stp", "", "Stop")
        elseif i == 1 and (flagsl or not PosParam.flagwork) or level_arr[i][4] then
          vctr = iif(i == 1, "Lbl", iif(level_arr[i][7] == 1, "LB", "LS"))
          level_arr[i][5] = AddLabelGraf(level_arr[i][1], vctr, "", iif(i == 1, 0, i - 2))
        end
      end
      if PosParam.currqty == 0 then
        CheckStop()
      end
      timelabel = os_time() + GParam.timelabel
      PosParam_save()
      flaglabels = true
      flaglabel = true
      return
    end
    if par2 == 3 then
      if not PosParam.flagwork then
        local fl1 = flaglabel
        WChkLabels()
        AddLvl(1, false)
        if GParam.fldebug then
          Msg2Log("\196\238\225\224\226\235\229\237 \237\238\226\251\233 \243\240\238\226\229\237\252, \237\224\239\240\224\226\235\229\237\232\229 \207\206\202\211\207\202\192", 2)
        end
        flaglabel = fl1
      end
      return
    end
    if par2 == 4 then
      if not PosParam.flagwork then
        local fl1 = flaglabel
        WChkLabels()
        AddLvl(2, false)
        if GParam.fldebug then
          Msg2Log("\196\238\225\224\226\235\229\237 \237\238\226\251\233 \243\240\238\226\229\237\252, \237\224\239\240\224\226\235\229\237\232\229 \207\208\206\196\192\198\192", 2)
        end
        flaglabel = fl1
      end
      return
    end
    if par2 == 5 then
      flagposclose = true
      if GParam.fldebug then
        Msg2Log("\199\224\234\240\251\242\232\229 \239\238\231\232\246\232\232 \239\238 \234\237\238\239\234\229. \202\238\237\242\240\224\234\242\251 " .. tostring(PosParam.currqty), 2)
      end
      return
    end
    if par2 == 6 and PosParam.currqty == 0 then
      PosParam.flagwork = false
      delalllevel_arr()
      if GParam.fldebug then
        Msg2Log("\211\228\224\235\229\237\232\229 \226\241\229\245 \243\240\238\226\237\229\233 \239\238 \234\237\238\239\234\229.", 2)
      end
      return
    end
  end
end
local function tlvls_init1()
  local f, err = io.open(GParam.ts_levels, "r")
  if not f then
    message(GParam.ts_id .. " " .. " " .. err)
    Level_arr_save()
  end
  f, err = io.open(GParam.ts_levels, "r")
  if not f then
    message(GParam.ts_id .. " " .. " " .. err)
  else
    level_arr = assert(loadstring("return " .. f:read("*a")))()
    f:close()
    ta_id[2] = AllocTable()
    AddColumn(ta_id[2], 1, "\199\237\224\247\229\237\232\229", true, QTABLE_STRING_TYPE, 13)
    AddColumn(ta_id[2], 2, "\202\238\235\232\247\229\241\242\226\238 %", true, QTABLE_STRING_TYPE, 13)
    AddColumn(ta_id[2], 3, "\202\238\235\232\247\229\241\242\226\238", true, QTABLE_STRING_TYPE, 13)
    AddColumn(ta_id[2], 4, "\206\242\240\224\225\238\242\224\237", true, QTABLE_STRING_TYPE, 13)
    AddColumn(ta_id[2], 5, "\211\228\224\235\232\242\252", true, QTABLE_STRING_TYPE, 13)
    AddColumn(ta_id[2], 6, "L/S", true, QTABLE_STRING_TYPE, 4)
    CreateWindow(ta_id[2])
    if PosParam.pos_arr == nil or PosParam.pos_arr.l == nil then
      SetWindowPos(ta_id[2], tPos[2].x, tPos[2].y, tPos[2].width, tPos[2].hight)
    else
      SetWindowPos(ta_id[2], PosParam.pos_arr.l[1], PosParam.pos_arr.l[2], PosParam.pos_arr.l[3], PosParam.pos_arr.l[4])
    end
    SetWindowCaption(ta_id[2], GParam.security .. ". \210\209: " .. GParam.ts_id .. ". \211\240\238\226\237\232")
    SetTableNotificationCallback(ta_id[2], event_callback_message)
    AddLevelTbl(true)
  end
end
local function tstop_init()
  ta_id[3] = AllocTable()
  AddColumn(ta_id[3], 1, "\199\237\224\247\229\237\232\229", true, QTABLE_STRING_TYPE, 14)
  AddColumn(ta_id[3], 2, "\202\238\235\232\247\229\241\242\226\238", true, QTABLE_STRING_TYPE, 14)
  AddColumn(ta_id[3], 3, "% \239\238\231\232\246\232\232", true, QTABLE_STRING_TYPE, 14)
  AddColumn(ta_id[3], 4, "\209\242\224\242\243\241", true, QTABLE_STRING_TYPE, 14)
  AddColumn(ta_id[3], 5, "\209\228\226\232\227", true, QTABLE_STRING_TYPE, 11)
  CreateWindow(ta_id[3])
  if PosParam.pos_arr == nil or PosParam.pos_arr.s == nil then
    SetWindowPos(ta_id[3], tPos[3].x, tPos[3].y, tPos[3].width, tPos[3].hight)
  else
    SetWindowPos(ta_id[3], PosParam.pos_arr.s[1], PosParam.pos_arr.s[2], PosParam.pos_arr.s[3], PosParam.pos_arr.s[4])
  end
  SetWindowCaption(ta_id[3], GParam.security .. ". \210\209: " .. GParam.ts_id .. ". \209\242\238\239\251")
  if #PosParam.stop_arr > 0 then
    AddStopTbl()
  end
end
local function tparam_init1(fl)
  local nNum = 1
  local color_r = iif(PosParam.currqty > 0, LIGHT_GREEN, iif(PosParam.currqty < 0, LIGHT_RED, -1))
  ta_id[1] = AllocTable()
  AddColumn(ta_id[1], 1, "\205\224\231\226\224\237\232\229", true, QTABLE_STRING_TYPE, 32)
  AddColumn(ta_id[1], 2, "\199\237\224\247\229\237\232\229", true, QTABLE_STRING_TYPE, 15)
  CreateWindow(ta_id[1])
  if PosParam.pos_arr == nil or PosParam.pos_arr.i == nil then
    SetWindowPos(ta_id[1], tPos[1].x, tPos[1].y, tPos[1].width, tPos[1].hight)
  else
    SetWindowPos(ta_id[1], PosParam.pos_arr.i[1], PosParam.pos_arr.i[2], PosParam.pos_arr.i[3], PosParam.pos_arr.i[4])
  end
  SetWindowCaption(ta_id[1], GParam.security .. ". \210\209: " .. GParam.ts_id .. ".")
  InsertRow(ta_id[1], -1)
  SetCell(ta_id[1], 1, 1, "\200\237\241\242\240\243\236\229\237\242")
  SetCell(ta_id[1], 1, 2, GParam.security)
  SetColor(ta_id[1], 1, -1, iif(GParam.ts_mode, LIGHT_GREEN, GRAY), -1, iif(GParam.ts_mode, LIGHT_GREEN, GRAY), -1)
  InsertRow(ta_id[1], -1)
  SetCell(ta_id[1], 2, 1, "\206\242\234\240\251\242\232\229 \239\238\231\232\246\232\232")
  if PosParam.flagposstoplifetime == 1 then
    SetCell(ta_id[1], 2, 2, "\199\224\239\240\229\249\229\237\238")
    SetColor(ta_id[1], 2, -1, RED, -1, RED, -1)
  else
    SetCell(ta_id[1], 2, 2, "\208\224\231\240\229\248\229\237\238")
    SetColor(ta_id[1], 2, -1, GREEN, -1, GREEN, -1)
  end
  InsertRow(ta_id[1], -1)
  SetCell(ta_id[1], 3, 1, "\205\224\239\240\224\226\235\229\237\232\229")
  SetCell(ta_id[1], 3, 2, iif(PosParam.currqty > 0, "LONG", iif(PosParam.currqty < 0, "SHORT", "\205\197\210")))
  SetColor(ta_id[1], 3, -1, iif(PosParam.currqty > 0, GREEN, iif(PosParam.currqty < 0, RED, GRAY)), -1, iif(PosParam.currqty > 0, GREEN, iif(PosParam.currqty < 0, RED, GRAY)), -1)
  InsertRow(ta_id[1], -1)
  SetCell(ta_id[1], 4, 1, "\207\238\231\232\246\232\255")
  SetCell(ta_id[1], 4, 2, tostring(PosParam.currqty))
  SetColor(ta_id[1], 4, -1, color_r, -1, color_r, -1)
  InsertRow(ta_id[1], -1)
  SetCell(ta_id[1], 5, 1, "\221\244\244. \246\229\237\224 \239\238\231\232\246\232\232")
  SetCell(ta_id[1], 5, 2, toPrice(PosParam.priceenter))
  SetColor(ta_id[1], 5, -1, color_r, -1, color_r, -1)
  InsertRow(ta_id[1], -1)
  SetCell(ta_id[1], 6, 1, "\194\224\240\232\224\246\232\238\237\237\224\255 \236\224\240\230\224")
  SetCell(ta_id[1], 6, 2, tostring(math_floor2(PosParam.profitpr, 0.01)))
  SetColor(ta_id[1], 6, -1, color_r, -1, color_r, -1)
  InsertRow(ta_id[1], -1)
  SetCell(ta_id[1], 7, 1, "\194\224\240. \236\224\240\230\224 \231\224 \228\229\237\252")
  if GParam.fldepominus then
    SetCell(ta_id[1], 7, 2, tostring(math_floor2(PosParam.profitday, 0.01)) .. " " .. tostring(math_floor2(PosParam.profitdaybl, 0.01)))
  else
    SetCell(ta_id[1], 7, 2, tostring(math_floor2(PosParam.profitday, 0.01)))
  end
  SetColor(ta_id[1], 7, -1, color_r, -1, color_r, -1)
  InsertRow(ta_id[1], -1)
  SetCell(ta_id[1], 8, 1, "\208\224\231\236\229\240 \228\229\239\238")
  SetCell(ta_id[1], 8, 2, tostring(PosParam.totaldepo))
  SetColor(ta_id[1], 8, -1, color_r, -1, color_r, -1)
  InsertRow(ta_id[1], -1)
  SetCell(ta_id[1], 9, 1, "\196\229\239\238 \237\224 \226\245\238\228")
  SetCell(ta_id[1], 9, 2, tostring(PosParam.deposize))
  SetColor(ta_id[1], 9, -1, color_r, -1, color_r, -1)
  InsertRow(ta_id[1], -1)
  SetCell(ta_id[1], 10, 1, "\199\224\225\235\238\234\232\240\238\226\224\237\238")
  SetCell(ta_id[1], 10, 2, tostring(PosParam.depoblock))
  SetColor(ta_id[1], 10, -1, color_r, -1, color_r, -1)
  InsertRow(ta_id[1], -1)
  SetCell(ta_id[1], 11, 1, "\215\232\241\235\238 \234\238\237\242\240\224\234\242\238\226")
  SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[PosParam.tradedir]))
  SetColor(ta_id[1], 11, -1, GREEN, -1, GREEN, -1)
  InsertRow(ta_id[1], -1)
  SetCell(ta_id[1], 12, 1, "MAX \215\232\241\235\238 \234\238\237\242\240\224\234\242\238\226")
  SetCell(ta_id[1], 12, 2, tostring(PosParam.totalqty))
  SetColor(ta_id[1], 12, -1, GREEN, -1, GREEN, -1)
  InsertRow(ta_id[1], -1)
  SetCell(ta_id[1], 13, 1, "\209\242\238\239: ")
  if GParam.rastop == 0 then
    SetCell(ta_id[1], 13, 2, tostring(GParam.depo_stop) .. "%")
  else
    SetCell(ta_id[1], 13, 2, tostring(GParam.rastop))
  end
  SetColor(ta_id[1], 13, -1, LIGHT_RED, -1, LIGHT_RED, -1)
  InsertRow(ta_id[1], -1)
  SetCell(ta_id[1], 14, 1, "\207\229\240\229\241\229\247\229\237\232\229 \209\211")
  SetCell(ta_id[1], 14, 2, iif(flagsl, tostring(PosParam.qtysl) .. " \232\231 " .. tostring(GParam.qtysl), "\206\242\234\235\254\247\229\237\238"))
  SetColor(ta_id[1], 14, -1, iif(flagsl, LIGHT_RED, GRAY), -1, iif(flagsl, LIGHT_RED, GRAY), -1)
end
local function tparam_renew1(row, vl)
  local type_v = ""
  if GParam.flagtparam then
    local color_r = iif(PosParam.currqty > 0, LIGHT_GREEN, iif(PosParam.currqty < 0, LIGHT_RED, -1))
    if IsWindowClosed(ta_id[1]) then
      GParam.flagtparam = false
      return
    end
    if row == 2 then
      if vl == 1 then
        SetCell(ta_id[1], 2, 2, iif(flagtblock, tblock_str, "\199\224\239\240\229\249\229\237\238"))
        SetColor(ta_id[1], 2, -1, RED, -1, RED, -1)
      else
        SetCell(ta_id[1], 2, 2, "\208\224\231\240\229\248\229\237\238")
        SetColor(ta_id[1], 2, -1, GREEN, -1, GREEN, -1)
      end
    elseif row == 3 then
      SetCell(ta_id[1], 3, 2, iif(PosParam.flaglong, "LONG", iif(PosParam.flagshort, "SHORT", "\205\197\210")))
      SetColor(ta_id[1], 3, -1, iif(PosParam.flaglong, GREEN, iif(PosParam.flagshort, RED, GRAY)), -1, iif(PosParam.flaglong, GREEN, iif(PosParam.flagshort, RED, GRAY)), -1)
    elseif row == 4 then
      SetCell(ta_id[1], 4, 2, tostring(PosParam.currqty))
      SetColor(ta_id[1], 4, -1, color_r, -1, color_r, -1)
    elseif row == 7 then
      if GParam.fldepominus then
        SetCell(ta_id[1], 7, 2, tostring(math_floor2(PosParam.profitday, 0.01)) .. " " .. tostring(math_floor2(PosParam.profitdaybl, 0.01)))
      else
        SetCell(ta_id[1], 7, 2, tostring(math_floor2(PosParam.profitday, 0.01)))
      end
      color_r = iif(0 <= PosParam.profitday, LIGHT_GREEN, LIGHT_RED)
      SetColor(ta_id[1], row, -1, color_r, -1, color_r, -1)
    else
      if row == 6 then
        color_r = iif(vl >= 0, LIGHT_GREEN, LIGHT_RED)
        SetCell(ta_id[1], row, 2, tostring(math_floor2(vl, 0.01)))
      else
        type_v = type(vl)
        if type_v == "string" then
          SetCell(ta_id[1], row, 2, vl)
        else
          SetCell(ta_id[1], row, 2, toPrice(vl))
        end
      end
      if row ~= 11 and row ~= 12 then
        SetColor(ta_id[1], row, -1, color_r, -1, color_r, -1)
      end
    end
  end
  type_v = nil
end
local function event_callback_messaget(t_id, msg, par1, par2)
  local chrkey = ""
  if #GParam.trdchar == 6 and msg == QTABLE_CHAR then
    chrkey = string.upper(string.char(par2))
  end
  if msg == QTABLE_LBUTTONDBLCLK or chrkey ~= "" then
    if par2 == 1 or par2 == 2 or chrkey == GParam.trdchar[1] or chrkey == GParam.trdchar[2] then
      if not btn_arr.fl then
        if chrkey == GParam.trdchar[1] then
          btn_arr.dir = 1
        elseif chrkey == GParam.trdchar[2] then
          btn_arr.dir = 2
        else
          btn_arr.dir = par2
        end
        if PosParam.currqty == 0 then
          PosParam.flagwork = false
          PosParam.tradedir = btn_arr.dir
          if #level_arr > 2 then
            InitLvl12(true)
            Clear(ta_id[2])
            AddLevelTbl(true)
          end
          if PosParam.tradedir == 1 then
            SetCell(ta_id[2], 3, 2, "\207\206\202\211\207\202\192")
            SetColor(ta_id[2], 3, 2, GREEN, -1, GREEN, -1)
            if GParam.fldebug then
              Msg2Log("\206\242\234\240\251\242\232\229 \239\238\231\232\246\232\232 \239\238 \234\237\238\239\234\229 \207\206\202\211\207\202\192", 2)
            end
          else
            SetCell(ta_id[2], 3, 2, "\207\208\206\196\192\198\192")
            SetColor(ta_id[2], 3, 2, RED, -1, RED, -1)
            if GParam.fldebug then
              Msg2Log("\206\242\234\240\251\242\232\229 \239\238\231\232\246\232\232 \239\238 \234\237\238\239\234\229 \207\208\206\196\192\198\192", 2)
            end
          end
          PosParam.flagwork = true
        elseif GParam.fldebug then
          Msg2Log("\200\231\236\229\237\229\237\232\229 \239\238\231\232\246\232\232 \239\238 \234\237\238\239\234\229 " .. iif(btn_arr.dir == 1, "\207\206\202\211\207\202\192", "\207\208\206\196\192\198\192"), 2)
        end
        btn_arr.fl = true
      end
      return
    elseif par2 == 3 or chrkey == GParam.trdchar[3] then
      flagposclose = true
      if GParam.fldebug then
        Msg2Log("\199\224\234\240\251\242\232\229 \239\238\231\232\246\232\232 \239\238 \234\237\238\239\234\229. \210\224\225\235\232\246\224 \242\238\240\227\238\226. \202\238\237\242\240\224\234\242\251 " .. tostring(PosParam.currqty), 2)
      end
      return
    elseif par2 == 4 or chrkey == GParam.trdchar[4] then
      flcoup = 1
      level_arr[2][2] = 1
      if GParam.fldebug then
        Msg2Log("\207\229\240\229\226\238\240\238\242 \239\238\231\232\246\232\232. \210\224\225\235\232\246\224 \242\238\240\227\238\226.", 2)
      end
      Level_arr_save()
      return
    elseif par2 == 5 or chrkey == GParam.trdchar[5] then
      PosParam.flagwork = true
      if GParam.fldebug then
        Msg2Log("\200\231\236\229\237\232\235\241\255 \241\242\224\242\243\241 \240\238\225\238\242\224, \242\229\234\243\249\232\233 " .. tostring(PosParam.flagwork), 2)
      end
      LevelWork()
      PosParam_save()
      return
    elseif par2 == 6 or chrkey == GParam.trdchar[6] then
      local i = 0
      local vctr = ""
      local l_arr = #level_arr
      WChkLabels()
      DelAllLabels(GParam.price_chart)
      if not PosParam.flagwork and PosParam.currqty == 0 and l_arr == 2 then
        level_arr[1][1] = tonumber(getParamEx(GParam.classcode, GParam.security, "LAST").param_value)
        SetCell(ta_id[2], 2, 1, toPrice(level_arr[1][1]))
        Level_arr_save()
      end
      for i = 1, l_arr do
        if i == 2 then
          level_arr[2][5] = AddLabelGraf(level_arr[2][1], "Stp", "", "Stop")
        elseif i == 1 and (flagsl or not PosParam.flagwork) or level_arr[i][4] then
          vctr = iif(i == 1, "Lbl", iif(level_arr[i][7] == 1, "LB", "LS"))
          level_arr[i][5] = AddLabelGraf(level_arr[i][1], vctr, "", iif(i == 1, 0, i - 2))
        end
      end
      if PosParam.currqty == 0 then
        CheckStop()
      end
      timelabel = os_time() + GParam.timelabel
      PosParam_save()
      flaglabels = true
      flaglabel = true
      return
    end
  end
end
local function ttrd_init()
  local ntrdchr = #GParam.trdchar
  if ntrdchr == nil then
    ntrdchr = 0
  end
  ta_id[4] = AllocTable()
  AddColumn(ta_id[4], 1, "\207\206\202\211\207\202\192", true, QTABLE_STRING_TYPE, 14)
  AddColumn(ta_id[4], 2, "\207\208\206\196\192\198\192", true, QTABLE_STRING_TYPE, 14)
  AddColumn(ta_id[4], 3, "\199\192\202\208\219\210\220", true, QTABLE_STRING_TYPE, 14)
  AddColumn(ta_id[4], 4, "\207\197\208\197\194\206\208\206\210", true, QTABLE_STRING_TYPE, 14)
  AddColumn(ta_id[4], 5, "\194\202\203\222\215\200\210\220", true, QTABLE_STRING_TYPE, 14)
  AddColumn(ta_id[4], 6, "\206\193\205.\204\197\210\202\200", true, QTABLE_STRING_TYPE, 10)
  CreateWindow(ta_id[4])
  if PosParam.pos_arr == nil or PosParam.pos_arr.t == nil then
    SetWindowPos(ta_id[4], tPos[4].x, tPos[4].y, tPos[4].width, tPos[4].hight)
  else
    SetWindowPos(ta_id[4], PosParam.pos_arr.t[1], PosParam.pos_arr.t[2], PosParam.pos_arr.t[3], PosParam.pos_arr.t[4])
  end
  SetWindowCaption(ta_id[4], GParam.security .. ". \210\209: " .. GParam.ts_id .. ". \210\238\240\227\238\226\235\255")
  SetTableNotificationCallback(ta_id[4], event_callback_messaget)
  InsertRow(ta_id[4], -1)
  InsertRow(ta_id[4], -1)
  if ntrdchr == 6 then
    SetCell(ta_id[4], 2, 1, "\207\206\202\211\207\202\192" .. "[" .. GParam.trdchar[1] .. "]")
    SetCell(ta_id[4], 2, 2, "\207\208\206\196\192\198\192" .. "[" .. GParam.trdchar[2] .. "]")
    SetCell(ta_id[4], 2, 3, "\199\192\202\208\219\210\220" .. "[" .. GParam.trdchar[3] .. "]")
    SetCell(ta_id[4], 2, 4, "\207\197\208\197\194\206\208\206\210" .. "[" .. GParam.trdchar[4] .. "]")
    SetCell(ta_id[4], 2, 5, "\194\202\203\222\215\200\210\220" .. "[" .. GParam.trdchar[5] .. "]")
    SetCell(ta_id[4], 2, 6, "\206\193\205.\204\197\210\202\200" .. "[" .. GParam.trdchar[6] .. "]")
  else
    SetCell(ta_id[4], 2, 1, "\207\206\202\211\207\202\192")
    SetCell(ta_id[4], 2, 2, "\207\208\206\196\192\198\192")
    SetCell(ta_id[4], 2, 3, "\199\192\202\208\219\210\220")
    SetCell(ta_id[4], 2, 4, "\207\197\208\197\194\206\208\206\210")
    SetCell(ta_id[4], 2, 5, "\194\202\203\222\215\200\210\220")
    SetCell(ta_id[4], 2, 6, "\206\193\205.\204\197\210\202\200")
  end
  SetColor(ta_id[4], -1, 1, LIGHT_GREEN, -1, LIGHT_GREEN, -1)
  SetColor(ta_id[4], -1, 2, LIGHT_RED, -1, LIGHT_RED, -1)
  SetColor(ta_id[4], -1, 3, RED, -1, RED, -1)
  SetColor(ta_id[4], -1, 4, GRAY, -1, GRAY, -1)
  SetColor(ta_id[4], -1, 5, RED, -1, RED, -1)
  SetColor(ta_id[4], -1, 6, GREEN, -1, GREEN, -1)
  InsertRow(ta_id[4], -1)
end
local function InitDepo()
  local koefd = iif(barpostime >= etstart, GParam.depo_perc[2], GParam.depo_perc[1]) / 100
  local dd = PosParam.countblock + 1
  if dd > #GParam.depo_download then
    dd = #GParam.depo_download
  end
  PosParam.totaldepo = GParam.deposize * koefd / PosParam.kfdepominus
  PosParam.deposize = PosParam.totaldepo * GParam.depo_download[dd] - PosParam.depoblock
  if PosParam.deposize < 0 then
    PosParam.deposize = 0
  end
  if 0 < sec_arr[3] then
    PosParam.totalqty = math_floor(PosParam.deposize / sec_arr[3])
  else
    PosParam.totalqty = 0
  end
  tparam_renew1(8, PosParam.totaldepo)
  tparam_renew1(9, PosParam.deposize)
  tparam_renew1(12, PosParam.totalqty)
end
local function BlockOnDay()
  local stoptime_e = os_date("!*t", os_time())
  stoptime_e.hour, stoptime_e.min, stoptime_e.sec = string_match("23:59:59", "(%d%d)%p(%d%d)%p(%d%d)")
  PosParam.timeblock = os_time(stoptime_e)
  if GParam.flblock and GParam.ts_blck ~= "" and GParam.flblockwrt then
    table_tofile(GParam.ts_blck, PosParam.timeblock, 1)
  end
end
local function ME_GetSignals()
  local num = getNumCandles(GParam.price_chart)
  if num > 0 and not trans_active.flagactive then
    local jj_tbl = {}
    local nGrf = 0
    local nNum = 0
    local last_price = 0
    local barpostime_l = 0
    local last_arr = 0
    local last_stop = #PosParam.stop_arr
    local stoptime_c = os_time()
    local flPPSave = false
    CheckLabels()
    if stoptime_c >= timecnct_s then
      last_price = tonumber(getParamEx(GParam.classcode, GParam.security, "LAST").param_value)
    end
    if numC ~= num then
      jj_tbl = {}
      nGrf = 0
      jj_tbl, nGrf = getCandlesByIndex(GParam.price_chart, 0, num - 1, 1)
      if nGrf == 1 then
        barpostime_l = os_time(jj_tbl[0].datetime)
        if barpostime_l > barpostime then
          PosParam.flagsl = true
          numC = num
          barpostime = barpostime_l
          price_bar = jj_tbl[0].open
          if PosParam.fletstart and barpostime >= etstart then
            PosParam.depoblock = 0
            InitDepo()
            PosParam.fletstart = false
          end
          if GParam.spot == 0 then
            sec_arr[4] = tonumber(getParamEx(GParam.classcode, GParam.security, "BUYDEPO").param_value)
          else
            sec_arr[4] = last_price * sec_arr[5]
          end
          if sec_arr[3] ~= sec_arr[4] and 0 < sec_arr[4] then
            sec_arr[3] = sec_arr[4]
            InitDepo()
          end
          if GParam.flagstopti and GParam.stop_chart ~= "" then
            jj_tbl = {}
            nGrf = 0
            if 0 < PosParam.currqty then
              jj_tbl, nGrf = getCandlesByIndex(GParam.stop_chart, GParam.numtlong, num - 2, 1)
              if nGrf > 0 then
                price_ind = jj_tbl[0].close - GParam.ind_shift
              end
            else
              jj_tbl, nGrf = getCandlesByIndex(GParam.stop_chart, GParam.numtshort, num - 2, 1)
              if nGrf > 0 then
                price_ind = jj_tbl[0].close + GParam.ind_shift
              end
            end
          end
        end
      end
    end
    if GParam.flblock and stoptime_c > PosParam.timeblock and stoptime_l[2] ~= stoptime_c then
      stoptime_l[2] = stoptime_c
      nGrf = 0
      local f, err = io.open(GParam.ts_blck, "r")
      if f then
        nGrf = tonumber(f:read("*a"))
        f:close()
      end
      if stoptime_c < nGrf and nGrf > PosParam.timeblock then
        PosParam.timeblock = nGrf
        if GParam.fldebug then
          Msg2Log("\206\225\237\238\226\235\229\237\232\229 \226\240\229\236\229\237\232 \225\235\238\234\232\240\238\226\234\232 \232\231 \244\224\233\235\224 " .. os_date("%d.%m.%Y %X", PosParam.timeblock), 1)
        end
      end
    end
    if level_arr ~= nil and level_arr ~= "" and level_arr ~= {} then
      last_arr = #level_arr
    else
      last_arr = 0
    end
    if flcoup == 1 then
      if PosParam.currqty ~= 0 then
        flagposclose = true
      else
        local fl = flaglabel
        WChkLabels()
        flcoup = 0
        PosParam.tradedir = iif(PosParam.tradedir == 1, 2, 1)
        if PosParam.tradedir == 1 then
          SetCell(ta_id[2], 3, 2, "\207\206\202\211\207\202\192")
          SetColor(ta_id[2], 3, 2, GREEN, -1, GREEN, -1)
        else
          SetCell(ta_id[2], 3, 2, "\207\208\206\196\192\198\192")
          SetColor(ta_id[2], 3, 2, RED, -1, RED, -1)
        end
        AddLvlCor()
        flaglabel = fl
      end
    end
    PosParam.flbtlongclose = false
    PosParam.flbtshortclose = false
    if btn_arr.fl and last_price > 0 then
      level_num = 0
      PosParam.pricelevel = toPrice(last_price)
      if PosParam.tradedir == 1 then
        if btn_arr.dir == 1 then
          startqty = AddLvlqty(PosParam.tradedir)
          PosParam.flaglong = true
          PosParam.flagshort = false
          PosParam.flagshortclose = true
          if PosParam.currqty == 0 then
            tparam_renew1(3, PosParam.flaglong)
            level_arr[1][1] = last_price + GParam.cor_shift
            SetCell(ta_id[2], 2, 1, toPrice(level_arr[1][1]))
            DelLabel(GParam.price_chart, level_arr[1][5])
          end
        else
          btn_arr.qty = math_floor(PosParam.totalqty * GParam.qty_arr[1] / 100)
          if btn_arr.qty == 0 then
            btn_arr.qty = 1
          end
          PosParam.flbtlongclose = true
        end
      elseif btn_arr.dir == 2 then
        startqty = AddLvlqty(PosParam.tradedir)
        PosParam.flagshort = true
        PosParam.flaglong = false
        PosParam.flaglongclose = true
        if PosParam.currqty == 0 then
          tparam_renew1(3, PosParam.flagshort)
          level_arr[1][1] = last_price - GParam.cor_shift
          SetCell(ta_id[2], 2, 1, toPrice(level_arr[1][1]))
          DelLabel(GParam.price_chart, level_arr[1][5])
        end
      else
        btn_arr.qty = math_floor(PosParam.totalqty * GParam.qty_arr[1] / 100)
        if btn_arr.qty == 0 then
          btn_arr.qty = 1
        end
        PosParam.flbtshortclose = true
      end
    else
      PosParam.flaglong = false
      PosParam.flagshort = false
      PosParam.flaglongclose = false
      PosParam.flagshortclose = false
    end
    PosParam.flaglongadd = false
    PosParam.flagshortadd = false
    PosParam.flagstop = false
    PosParam.flagprofit = false
    if flagposclose then
      if PosParam.currqty ~= 0 then
        PosParam.flaglong = false
        PosParam.flagshort = false
        PosParam.flagshortclose = true
        PosParam.flaglongclose = true
        PosParam.flagwork = false
      end
      flagposclose = false
    end
    if not btn_arr.fl and last_arr > 0 then
      if PosParam.currqty ~= 0 and last_price > 0 and 0 < level_arr[1][1] then
        if 0 < GParam.stopdepo then
          nNum = sec_arr[1]
          if GParam.spot == 0 then
            nNum = tonumber(getParamEx(GParam.classcode, GParam.security, "STEPPRICE").param_value)
          end
          nGrf = PosParam.profitday + (last_price - PosParam.priceenter) * nNum * sec_arr[5] / sec_arr[1] * PosParam.currqty / GParam.deposize * 100
          if -1 * nGrf >= GParam.stopdepo then
            BlockOnDay()
            if GParam.fldebug then
              Msg2Log("\207\240\238\241\224\228\234\224 \231\224 \228\229\237\252 \239\240\229\226\251\241\232\235\224 " .. tostring(nGrf) .. " % \238\242 \228\229\239\238\231\232\242\224, \231\224\234\240\251\226\224\229\236 \239\238\231\232\246\232\254 \232 \225\235\238\234\232\240\243\229\236 \228\238 \234\238\237\246\224 \228\237\255", 1)
            end
          end
        end
        flPPSave = false
        local sprice = 0
        if flagsl and PosParam.flagsl and (last_price >= level_arr[1][1] and price_bar < level_arr[1][1] or last_price <= level_arr[1][1] and price_bar > level_arr[1][1]) then
          PosParam.flagsl = false
          PosParam.qtysl = PosParam.qtysl + 1
          SetCell(ta_id[1], 14, 2, tostring(PosParam.qtysl) .. " \232\231 " .. tostring(GParam.qtysl))
        end
        if level_arr[2][4] then
          if 0 < PosParam.currqty then
            if flagsl and PosParam.flagsl2 and PosParam.qtysl >= GParam.qtysl then
              if GParam.fldebug then
                Msg2Log("\203\238\237\227: \207\229\240\229\226\238\228 \241\242\238\239\224 \239\238 " .. tostring(PosParam.qtysl) .. " \239\229\240\229\241\229\247\229\237\232\255\236 \237\224 \243\240\238\226\229\237\252 " .. tostring(level_arr[1][1]), 1)
              end
              for nNum = 1, last_stop do
                if PosParam.stop_arr[nNum][5] < level_arr[1][1] then
                  sprice = level_arr[1][1]
                  PosParam.stop_arr[nNum][5] = sprice
                  if 1 > PosParam.stop_arr[nNum][7] then
                    PosParam.stop_arr[nNum][7] = 1
                  end
                  EditStopTbl(nNum)
                end
              end
              PosParam.flagsl2 = false
              flPPSave = true
            end
            if PosParam.flagnull and last_price >= PosParam.priceprofit then
              for nNum = 1, last_stop do
                if PosParam.stop_arr[nNum][5] < PosParam.priceenter + GParam.ranullplus then
                  sprice = PosParam.priceenter + GParam.ranullplus
                  PosParam.stop_arr[nNum][5] = sprice
                end
                if 1 > PosParam.stop_arr[nNum][7] then
                  PosParam.stop_arr[nNum][7] = 1
                end
                EditStopTbl(nNum)
              end
              PosParam.flagnull = false
              PosParam.flnullpos = false
              flPPSave = true
            end
          else
            if flagsl and PosParam.flagsl2 and PosParam.qtysl >= GParam.qtysl then
              if GParam.fldebug then
                Msg2Log("\216\238\240\242: \207\229\240\229\226\238\228 \241\242\238\239\224 \239\238 " .. tostring(PosParam.qtysl) .. " \239\229\240\229\241\229\247\229\237\232\255\236 \237\224 \243\240\238\226\229\237\252 " .. tostring(level_arr[1][1]), 1)
              end
              for nNum = 1, last_stop do
                if PosParam.stop_arr[nNum][5] > level_arr[1][1] then
                  sprice = level_arr[1][1]
                  PosParam.stop_arr[nNum][5] = sprice
                  if 1 > PosParam.stop_arr[nNum][7] then
                    PosParam.stop_arr[nNum][7] = 1
                  end
                  EditStopTbl(nNum)
                end
              end
              PosParam.flagsl2 = false
              flPPSave = true
            end
            if PosParam.flagnull and last_price <= PosParam.priceprofit then
              for nNum = 1, last_stop do
                if PosParam.stop_arr[nNum][5] > PosParam.priceenter - GParam.ranullplus then
                  sprice = PosParam.priceenter - GParam.ranullplus
                  PosParam.stop_arr[nNum][5] = sprice
                end
                if 1 > PosParam.stop_arr[nNum][7] then
                  PosParam.stop_arr[nNum][7] = 1
                end
                EditStopTbl(nNum)
              end
              PosParam.flagnull = false
              PosParam.flnullpos = false
              flPPSave = true
            end
          end
          if GParam.flagstopti and price_ind ~= 0 and (not GParam.flagstopap or PosParam.flagprofitmade) then
            if 0 < PosParam.currqty then
              for nNum = 1, last_stop do
                if PosParam.stop_arr[nNum][5] < price_ind then
                  PosParam.stop_arr[nNum][5] = price_ind
                  EditStopTbl(nNum)
                  flPPSave = true
                end
              end
            else
              for nNum = 1, last_stop do
                if PosParam.stop_arr[nNum][5] > price_ind then
                  PosParam.stop_arr[nNum][5] = price_ind
                  EditStopTbl(nNum)
                  flPPSave = true
                end
              end
            end
          end
          if sprice > 0 then
            EditLabelStop(sprice, true)
            SetCell(ta_id[2], 3, 1, toPrice(level_arr[2][1]))
          end
        end
        if 0 < PosParam.currqty then
          if last_price > PosParam.pricepeak then
            PosParam.pricepeak = last_price
            PosParam.ssperc = 1
            PosParam.aapercsh = 1
          end
          if GParam.flagautoadd and PosParam.startqty[1] < PosParam.totalqty and 0 < PosParam.clplusqty and PosParam.aaperc <= #GParam.aaperc and last_price >= PosParam.priceenter + GParam.aaperc[PosParam.aaperc][2] then
            if level_arr[1][3] ~= 0 then
              level_arr[1][3] = 0
              SetCell(ta_id[2], 2, 3, "\202\206\208\200\196\206\208")
            end
            if PosParam.clplusqty > PosParam.totalqty then
              PosParam.clplusqty = PosParam.totalqty
            end
            local cqty = PosParam.clplusqty * GParam.aaperc[PosParam.aaperc][1]
            if cqty > PosParam.totalqty - PosParam.startqty[1] then
              cqty = PosParam.totalqty - PosParam.startqty[1]
            end
            startqty = AddLvlqty(PosParam.tradedir, cqty)
            PosParam.startqty[1] = PosParam.startqty[1] + startqty
            SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[1]))
            level_num = 0
            PosParam.flaglong = true
            PosParam.pricelevel = toPrice(last_price)
            if GParam.fldebug then
              Msg2Log("\192\226\242\238\236\224\242\232\247\229\241\234\224\255 \228\238\234\243\239\234\224 \226 \235\238\237\227 " .. tostring(cqty) .. " \234\238\237\242\240\224\234\242\238\226 \239\238 \246\229\237\229 " .. tostring(last_price), 1)
            end
            PosParam.flagautoadd = GParam.aaperc[PosParam.aaperc][3]
            PosParam.aaperc = PosParam.aaperc + 1
            PosParam.ssperc = 1
          end
          if not PosParam.flaglong and GParam.flautoaddsh and PosParam.startqty[1] < PosParam.totalqty and 0 < PosParam.clplusqty and PosParam.aapercsh <= #GParam.aapercsh and last_price <= PosParam.pricepeak - GParam.aapercsh[PosParam.aapercsh][2] then
            if PosParam.clplusqty > PosParam.totalqty then
              PosParam.clplusqty = PosParam.totalqty
            end
            local cqty = PosParam.clplusqty * GParam.aapercsh[PosParam.aapercsh][1]
            if cqty > PosParam.totalqty - PosParam.startqty[1] then
              cqty = PosParam.totalqty - PosParam.startqty[1]
            end
            startqty = AddLvlqty(PosParam.tradedir, cqty)
            PosParam.startqty[1] = PosParam.startqty[1] + startqty
            SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[1]))
            level_num = 0
            PosParam.flaglong = true
            PosParam.pricelevel = toPrice(last_price)
            if GParam.fldebug then
              Msg2Log("\192\226\242\238\236\224\242\232\247\229\241\234\224\255 \228\238\234\243\239\234\224 \226 \235\238\237\227 \239\238 \238\225\240\224\242\237\238\236\243 \228\226\232\230\229\237\232\254 " .. tostring(cqty) .. " \234\238\237\242\240\224\234\242\238\226 \239\238 \246\229\237\229 " .. tostring(last_price), 1)
            end
            PosParam.aapercsh = PosParam.aapercsh + 1
          end
          if not PosParam.flaglong then
            if 0 < #GParam.stopshift and PosParam.ssperc <= #GParam.stopshift and last_price <= PosParam.pricepeak - GParam.stopshift[PosParam.ssperc][2] and last_price >= PosParam.priceenter then
              PosParam.flaglongadd = true
              local sshft = GParam.stopshift[PosParam.ssperc][1]
              PosParam.stopshift = math_ceil(PosParam.currqty * sshft)
              local qtys = PosParam.stopshift
              local qtys2 = 0
              for nNum = last_stop, 1, -1 do
                if 0 < PosParam.stop_arr[nNum][4] and qtys > 0 then
                  qtys2 = math_ceil(PosParam.stop_arr[nNum][4] * sshft)
                  if qtys2 > PosParam.stop_arr[nNum][4] then
                    qtys2 = PosParam.stop_arr[nNum][4]
                  end
                  if qtys < qtys2 then
                    qtys2 = qtys
                    qtys = 0
                  else
                    qtys = qtys - qtys2
                  end
                  PosParam.stop_arr[nNum][4] = PosParam.stop_arr[nNum][4] - qtys2
                  if 0 >= PosParam.stop_arr[nNum][4] then
                    PosParam.stop_arr[nNum][6] = false
                  end
                  EditStopTbl(nNum)
                end
              end
              if GParam.fldebug then
                Msg2Log("\209\242\238\239 \203\206\205\195 \239\238 \238\225\240\224\242\237\238\236\243 \228\226\232\230\229\237\232\254. \205\238\236\229\240 " .. tostring(PosParam.ssperc) .. " \202\238\237\242\240\224\234\242\251: " .. tostring(PosParam.stopshift) .. " \214\229\237\224 " .. tostring(last_price) .. " \207\232\234 " .. tostring(PosParam.pricepeak) .. " \209\221 " .. tostring(PosParam.priceenter), 1)
              end
              flPPSave = true
              PosParam.ssperc = PosParam.ssperc + 1
            end
            if not PosParam.flaglongadd then
              nNum = 1
              while not PosParam.flagstop and last_stop >= nNum do
                if PosParam.stop_arr[nNum][6] then
                  if 0 < PosParam.stop_arr[nNum][2] and last_price >= PosParam.priceenter + PosParam.stop_arr[nNum][2] and PosParam.stop_arr[nNum][5] < last_price - PosParam.stop_arr[nNum][3] then
                    PosParam.stop_arr[nNum][5] = last_price - PosParam.stop_arr[nNum][3]
                    PosParam.stop_arr[nNum][7] = 2
                    EditStopTbl(nNum)
                    flPPSave = true
                  end
                  if last_price <= PosParam.stop_arr[nNum][5] then
                    PosParam.flagstop = true
                    PosParam.pricelevel = PosParam.stop_arr[nNum][5]
                    PosParam.currcountersc = nNum
                  end
                end
                nNum = nNum + 1
              end
              if PosParam.flagstop and PosParam.pricelevel < PosParam.priceenter then
                if GParam.fldebug then
                  Msg2Log("\199\224\234\240\251\242\232\229 \226\241\229\233 \239\238\231\232\246\232\232 \239\238 \241\242\238\239\243. \214\229\237\224 " .. tostring(last_price) .. " \209\242\238\239 \236\224\241\241\232\226\224" .. tostring(PosParam.pricelevel) .. " \209\242\238\239-\243\240\238\226\229\237\252 " .. tostring(level_arr[2][1]), 1)
                end
                PosParam.flagstop = false
                PosParam.flagshortclose = true
                PosParam.flaglongclose = true
                PosParam.flagwork = false
              end
            end
          end
        else
          if last_price < PosParam.pricepeak or PosParam.pricepeak == 0 then
            PosParam.pricepeak = last_price
            PosParam.aapercsh = 1
            PosParam.ssperc = 1
          end
          if GParam.flagautoadd and PosParam.startqty[2] < PosParam.totalqty and 0 < PosParam.clplusqty and PosParam.aaperc <= #GParam.aaperc and last_price <= PosParam.priceenter - GParam.aaperc[PosParam.aaperc][2] then
            if level_arr[1][3] ~= 0 then
              level_arr[1][3] = 0
              SetCell(ta_id[2], 2, 3, "\202\206\208\200\196\206\208")
            end
            if PosParam.clplusqty > PosParam.totalqty then
              PosParam.clplusqty = PosParam.totalqty
            end
            local cqty = PosParam.clplusqty * GParam.aaperc[PosParam.aaperc][1]
            if cqty > PosParam.totalqty - PosParam.startqty[2] then
              cqty = PosParam.totalqty - PosParam.startqty[2]
            end
            startqty = AddLvlqty(PosParam.tradedir, cqty)
            PosParam.startqty[2] = PosParam.startqty[2] + startqty
            SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[2]))
            level_num = 0
            PosParam.flagshort = true
            PosParam.pricelevel = toPrice(last_price)
            if GParam.fldebug then
              Msg2Log("\192\226\242\238\236\224\242\232\247\229\241\234\224\255 \228\238\234\243\239\234\224 \226 \248\238\240\242 " .. tostring(cqty) .. " \234\238\237\242\240\224\234\242\238\226 \239\238 \246\229\237\229 " .. tostring(last_price), 1)
            end
            PosParam.flagautoadd = GParam.aaperc[PosParam.aaperc][3]
            PosParam.aaperc = PosParam.aaperc + 1
            PosParam.ssperc = 1
          end
          if not PosParam.flagshort and GParam.flautoaddsh and PosParam.startqty[2] < PosParam.totalqty and 0 < PosParam.clplusqty and PosParam.aapercsh <= #GParam.aapercsh and last_price >= PosParam.pricepeak + GParam.aapercsh[PosParam.aapercsh][2] then
            if PosParam.clplusqty > PosParam.totalqty then
              PosParam.clplusqty = PosParam.totalqty
            end
            local cqty = PosParam.clplusqty * GParam.aapercsh[PosParam.aapercsh][1]
            if cqty > PosParam.totalqty - PosParam.startqty[2] then
              cqty = PosParam.totalqty - PosParam.startqty[2]
            end
            startqty = AddLvlqty(PosParam.tradedir, cqty)
            PosParam.startqty[2] = PosParam.startqty[2] + startqty
            SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[2]))
            level_num = 0
            PosParam.flagshort = true
            PosParam.pricelevel = toPrice(last_price)
            if GParam.fldebug then
              Msg2Log("\192\226\242\238\236\224\242\232\247\229\241\234\224\255 \228\238\234\243\239\234\224 \226 \248\238\240\242 \239\238 \238\225\240\224\242\237\238\236\243 \228\226\232\230\229\237\232\254 " .. tostring(cqty) .. " \234\238\237\242\240\224\234\242\238\226 \239\238 \246\229\237\229 " .. tostring(last_price), 1)
            end
            PosParam.aapercsh = PosParam.aapercsh + 1
          end
          if not PosParam.flagshort then
            if 0 < #GParam.stopshift and PosParam.ssperc <= #GParam.stopshift and last_price >= PosParam.pricepeak + GParam.stopshift[PosParam.ssperc][2] and last_price <= PosParam.priceenter then
              PosParam.flagshortadd = true
              local sshft = GParam.stopshift[PosParam.ssperc][1]
              PosParam.stopshift = math_ceil(-1 * PosParam.currqty * sshft)
              local qtys = PosParam.stopshift
              local qtys2 = 0
              for nNum = last_stop, 1, -1 do
                if 0 < PosParam.stop_arr[nNum][4] and qtys > 0 then
                  qtys2 = math_ceil(PosParam.stop_arr[nNum][4] * sshft)
                  if qtys2 > PosParam.stop_arr[nNum][4] then
                    qtys2 = PosParam.stop_arr[nNum][4]
                  end
                  if qtys < qtys2 then
                    qtys2 = qtys
                    qtys = 0
                  else
                    qtys = qtys - qtys2
                  end
                  PosParam.stop_arr[nNum][4] = PosParam.stop_arr[nNum][4] - qtys2
                  if 0 >= PosParam.stop_arr[nNum][4] then
                    PosParam.stop_arr[nNum][6] = false
                  end
                  EditStopTbl(nNum)
                end
              end
              if GParam.fldebug then
                Msg2Log("\209\242\238\239 \216\206\208\210 \239\238 \238\225\240\224\242\237\238\236\243 \228\226\232\230\229\237\232\254. \205\238\236\229\240 " .. tostring(PosParam.ssperc) .. " \202\238\237\242\240\224\234\242\251: " .. tostring(PosParam.stopshift) .. " \214\229\237\224 " .. tostring(last_price) .. " \207\232\234 " .. tostring(PosParam.pricepeak) .. " \209\221 " .. tostring(PosParam.priceenter), 1)
              end
              flPPSave = true
              PosParam.ssperc = PosParam.ssperc + 1
            end
            if not PosParam.flagshortadd then
              nNum = 1
              while not PosParam.flagstop and last_stop >= nNum do
                if PosParam.stop_arr[nNum][6] then
                  if 0 < PosParam.stop_arr[nNum][2] and last_price <= PosParam.priceenter - PosParam.stop_arr[nNum][2] and PosParam.stop_arr[nNum][5] > last_price + PosParam.stop_arr[nNum][3] then
                    PosParam.stop_arr[nNum][5] = last_price + PosParam.stop_arr[nNum][3]
                    PosParam.stop_arr[nNum][7] = 2
                    EditStopTbl(nNum)
                    flPPSave = true
                  end
                  if last_price >= PosParam.stop_arr[nNum][5] then
                    PosParam.flagstop = true
                    PosParam.pricelevel = PosParam.stop_arr[nNum][5]
                    PosParam.currcountersc = nNum
                  end
                end
                nNum = nNum + 1
              end
              if PosParam.flagstop and PosParam.pricelevel > PosParam.priceenter then
                if GParam.fldebug then
                  Msg2Log("\199\224\234\240\251\242\232\229 \226\241\229\233 \239\238\231\232\246\232\232 \239\238 \241\242\238\239\243. \214\229\237\224 " .. tostring(last_price) .. " \209\242\238\239 \236\224\241\241\232\226\224" .. tostring(PosParam.pricelevel) .. " \209\242\238\239-\243\240\238\226\229\237\252 " .. tostring(level_arr[2][1]), 1)
                end
                PosParam.flagstop = false
                PosParam.flagshortclose = true
                PosParam.flaglongclose = true
                PosParam.flagwork = false
              end
            end
          end
        end
        if flPPSave then
          PosParam_save()
        end
      end
      if flagwork_l ~= PosParam.flagwork then
        flagwork_l = PosParam.flagwork
        LevelWork()
        if PosParam.currqty == 0 then
          level_arr[1][4] = PosParam.flagwork
          if PosParam.flagwork then
            flcoup = 0
            level_arr[2][2] = 0
          end
          Level_arr_save()
        end
      end
    end
    flagtblock = false
    if PosParam.currqty == 0 or 0 < PosParam.currqty and last_price < PosParam.priceenter or 0 > PosParam.currqty and last_price > PosParam.priceenter then
      if GParam.flagblock and stoptime_c < PosParam.timeblock then
        PosParam.flagposstoplifetime = 1
        flagtblock = true
        PosParam.flagshortclose = true
        PosParam.flaglongclose = true
        PosParam.flaglong = false
        PosParam.flagshort = false
        if stoptime_c > stoptime_l[1] then
          flagposstoplifetime_l = -1
          stoptime_l[1] = stoptime_c
          tblock_str = os_date("!%H:%M:%S", PosParam.timeblock - stoptime_c)
          tparam_renew1(2, PosParam.flagposstoplifetime)
        end
      else
        flagposstoplifetime_l = -1
        PosParam.flagposstoplifetime = 0
        if 0 < PosParam.timeblock then
          tparam_renew1(2, PosParam.flagposstoplifetime)
        end
        PosParam.timeblock = 0
      end
    end
    if GParam.flagstoptime and not flagtblock then
      if stoptime_c > stoptimepos.e then
        PosParam.flagposstoplifetime = 0
        local stoptime_e = os_date("!*t", os_time())
        nNum = 1
        while stoptime_c > stoptimepos.e and nNum <= #GParam.stoptime_arr do
          stoptime_e.hour, stoptime_e.min, stoptime_e.sec = string_match(GParam.stoptime_arr[nNum][2], "(%d%d)%p(%d%d)%p(%d%d)")
          stoptimepos.e = os_time(stoptime_e)
          stoptimepos.b = stoptimepos.e - GParam.stoptime_arr[nNum][1]
          if GParam.stoptime_arr[nNum][3] ~= nil then
            flagstoptimestart = GParam.stoptime_arr[nNum][3]
          else
            flagstoptimestart = false
          end
          nNum = nNum + 1
        end
      end
      if stoptime_c >= stoptimepos.b and stoptime_c <= stoptimepos.e then
        if flagstoptimestart then
          PosParam.flagshortclose = true
          PosParam.flaglongclose = true
          PosParam.flaglong = false
          PosParam.flagshort = false
          PosParam.flagwork = false
        end
        PosParam.flagposstoplifetime = 1
      end
      if flagposstoplifetime_l ~= PosParam.flagposstoplifetime then
        flagposstoplifetime_l = PosParam.flagposstoplifetime
        tparam_renew1(2, PosParam.flagposstoplifetime)
      end
    end
    if not btn_arr.fl then
      if last_arr > 0 and not PosParam.flagstop and PosParam.flagwork and not flagtblock and last_price > 0 and last_arr > 2 then
        nNum = 3
        local flagord = true
        while last_arr >= nNum and not PosParam.flaglong and not PosParam.flagshort do
          if flagord and level_arr[nNum][4] and 0 < level_arr[nNum][1] then
            if level_arr[nNum][7] == 1 then
              local last_price_O = tonumber(getParamEx(GParam.classcode, GParam.security, "OFFER").param_value)
              if last_price_O > 0 and price_bar < level_arr[nNum][1] + GParam.lvl_slip and price_bar > 0 and last_price >= level_arr[nNum][1] and last_price_O <= level_arr[nNum][1] + GParam.lvl_slip or price_bar > level_arr[nNum][1] - GParam.lvl_slip and last_price <= level_arr[nNum][1] and last_price_O >= level_arr[nNum][1] - GParam.lvl_slip then
                PosParam.flaglong = true
                level_num = nNum
                PosParam.pricelevel = toPrice(level_arr[nNum][1])
              end
            else
              local last_price_B = tonumber(getParamEx(GParam.classcode, GParam.security, "BID").param_value)
              if last_price_B > 0 and price_bar < level_arr[nNum][1] + GParam.lvl_slip and price_bar > 0 and last_price >= level_arr[nNum][1] and last_price_B <= level_arr[nNum][1] + GParam.lvl_slip or price_bar > level_arr[nNum][1] - GParam.lvl_slip and last_price <= level_arr[nNum][1] and last_price_B >= level_arr[nNum][1] - GParam.lvl_slip then
                PosParam.flagshort = true
                level_num = nNum
                PosParam.pricelevel = toPrice(level_arr[nNum][1])
              end
            end
            if level_arr[1][3] ~= 0 and (PosParam.startqty[1] == 0 or PosParam.startqty[2] == 0) then
              flagord = false
            end
          end
          nNum = nNum + 1
        end
        if PosParam.flaglong and level_num > 0 then
          if PosParam.tradedir ~= 1 then
            PosParam.tradedir = 1
            SetCell(ta_id[2], 3, 2, "\207\206\202\211\207\202\192")
            SetColor(ta_id[2], 3, 2, GREEN, -1, GREEN, -1)
            SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[PosParam.tradedir]))
          end
          tparam_renew1(3, PosParam.flaglong)
          startqty = level_arr[level_num][3]
          if GParam.fldebug then
            Msg2Log("\206\242\234\240\251\242\232\229 \239\238\231\232\246\232\232 \226 \203\206\205\195 \239\238 \243\240\238\226\237\254 " .. tostring(level_num + 1), 2)
          end
          PosParam.flagshort = false
          PosParam.flagshortclose = true
        end
        if PosParam.flagshort and level_num > 0 then
          if PosParam.tradedir ~= 2 then
            PosParam.tradedir = 2
            SetCell(ta_id[2], 3, 2, "\207\208\206\196\192\198\192")
            SetColor(ta_id[2], 3, 2, RED, -1, RED, -1)
            SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[PosParam.tradedir]))
          end
          tparam_renew1(3, PosParam.flagshort)
          startqty = level_arr[level_num][3]
          if GParam.fldebug then
            Msg2Log("\206\242\234\240\251\242\232\229 \239\238\231\232\246\232\232 \226 \216\206\208\210 \239\238 \243\240\238\226\237\254 " .. tostring(level_num + 1), 2)
          end
          PosParam.flaglong = false
          PosParam.flaglongclose = true
        end
      end
    elseif PosParam.flagposstoplifetime == 1 and (PosParam.currqty == 0 or PosParam.flagshortclose and PosParam.flaglongclose) then
      PosParam.flaglong = false
      PosParam.flagshort = false
      if GParam.fldebug then
        Msg2Log("\209\225\240\238\241 \243\226\229\235\232\247\229\237\232\255 \239\238\231\232\246\232\232 \239\238 \234\237\238\239\234\229 \239\238 \225\235\238\234\232\240\238\226\234\229/\240\224\241\239\232\241\224\237\232\254", 2)
      end
      btn_arr.fl = false
    end
    jj_tbl = nil
  end
end
local function init_logs()
  local err = ""
  f_log[1], err = io.open(GParam.ts_log_m, "a+")
  if not f_log[1] then
    f_log[1], err = io.open(GParam.ts_log_m, "w")
    if not f_log[1] then
      message(GParam.ts_id .. " " .. err)
    else
      f_log[1]:close()
      f_log[1], err = io.open(GParam.ts_log_m, "a+")
    end
  end
  if f_log[1]:seek("end") == 0 then
    f_log[1]:write("\196\224\242\224 \232 \226\240\229\236\255;ID \210\209;ID \239\238\231\232\246\232\232;\210\232\239 \241\238\238\225\249\229\237\232\255;\210\229\234\241\242;\n")
    f_log[1]:flush()
  end
  f_log[2], err = io.open(GParam.ts_log_t, "a+")
  if not f_log[2] then
    f_log[2], err = io.open(GParam.ts_log_t, "w")
    if not f_log[2] then
      message(GParam.ts_id .. " " .. err)
    else
      f_log[2]:close()
      f_log[2], err = io.open(GParam.ts_log_t, "a+")
    end
  end
  if f_log[2]:seek("end") == 0 then
    f_log[2]:write("\196\224\242\224 \232 \226\240\229\236\255;ID \210\209;ID \239\238\231\232\246\232\232;\202\238\228 \232\237\241\242\240\243\236\229\237\242\224;ID \242\240\224\237\231\224\234\246\232\232;ID \231\224\255\226\234\232;\209\232\227\237\224\235;\214\229\237\224 \226\245\238\228\224 \239\238\231\232\246\232\232;\209\240\229\228\237\255\255 \246\229\237\224 \239\238\231\232\246\232\232;\214\229\237\224 \239\238\241\235\229\228\237\229\233 \241\228\229\235\234\232;\206\225\250\229\236 \239\238\241\235\229\228\237\229\233 \241\228\229\235\234\232;\210\229\234\243\249\229\229 \234\238\235\232\247\229\241\242\226\238 \234\238\237\242\240\224\234\242\238\226;\210\229\234\243\249\232\233 \238\225\250\229\236 \239\238\231\232\246\232\232;\196\238\245\238\228 \239\238\231\232\246\232\232;\211\240\238\226\229\237\252 Long;\211\240\238\226\229\237\252 Short;\211\240\238\226\229\237\252 Stop;\211\240\238\226\229\237\252 Profit;\211\240\238\226\229\237\252;\209\247\229\242\247\232\234;FlagLong;FlagShort;FlagStop;FlagStopmade;FlagProfit;FlagProfitmade;FlagLongClose;FlagShortClose;FlagStopPos;\n")
    f_log[2]:flush()
  end
end
local function close_logs()
  if f_log[1] then
    f_log[1]:flush()
    f_log[1]:close()
  end
  if f_log[2] then
    f_log[2]:flush()
    f_log[2]:close()
  end
  f_log[1] = nil
  f_log[2] = nil
end
local function Trade2Log()
  local tData = os_date("%d.%m.%Y %X") .. ";" .. GParam.ts_id .. ";" .. PosParam.pos_id .. ";" .. GParam.security .. ";" .. trans_active.trans_id .. ";" .. trans_active.order_num .. ";" .. PosParam.signalname .. ";" .. PosParam.pricepos .. ";" .. PosParam.priceenter .. ";" .. PosParam.pricetrades .. ";" .. PosParam.valuetrades .. ";" .. PosParam.currqty .. ";" .. PosParam.valuepos .. ";" .. PosParam.profitpos .. ";" .. PosParam.pricelong .. ";" .. PosParam.priceshort .. ";" .. PosParam.pricestop .. ";" .. PosParam.priceprofit .. ";" .. PosParam.pricelevel .. ";" .. PosParam.currcountersc .. ";" .. tostring(PosParam.flaglong) .. ";" .. tostring(PosParam.flagshort) .. ";" .. tostring(PosParam.flagstop) .. ";" .. tostring(PosParam.flagstopmade) .. ";" .. tostring(PosParam.flagprofit) .. ";" .. tostring(PosParam.flagprofitmade) .. ";" .. tostring(PosParam.flaglongclose) .. ";" .. tostring(PosParam.flagshortclose) .. ";" .. tostring(PosParam.flagposstoplifetime) .. ";\n"
  if f_log[2] then
    f_log[2]:write(tData)
    f_log[2]:flush()
  end
  tData = nil
end
local function SessionRun()
  local Status = tonumber(getParamEx(GParam.classcode, GParam.security, "STATUS").param_value)
  if Status == 1 then
    return true
  else
    return false
  end
end
local function getPositionFut()
  local i = 0
  if GParam.spot == 0 then
    local nNum = getNumberOf("futures_client_holding")
    if nNum ~= nil and nNum > 0 then
      local row = {}
      for i = 0, nNum - 1 do
        row = getItem("futures_client_holding", i)
        if row ~= nil and row.sec_code == GParam.security and row.trdaccid == GParam.account then
          if row.totalnet == nil then
            return 999999
          else
            return row.totalnet
          end
        end
      end
    end
  else
    local nNum = getNumberOf("depo_limits")
    if nNum ~= nil and nNum > 0 then
      local row = {}
      for i = 0, nNum - 1 do
        row = getItem("depo_limits", i)
        if row ~= nil and 0 <= row.limit_kind and row.sec_code == GParam.security and row.client_code == GParam.client_code then
          if row.currentbal == nil then
            return 999999
          else
            return math_floor(row.currentbal / sec_arr[5])
          end
        end
      end
    end
  end
  return 999999
end
local getFutLimit = function()
  if GParam.flagchdepo then
    local nNum = getNumberOf("futures_client_limits")
    if nNum ~= nil and nNum > 0 then
      local row = {}
      for i = 0, nNum - 1 do
        row = getItem("futures_client_limits", i)
        if row ~= nil and row.limit_type == 0 and row.trdaccid == GParam.account and row.cbplimit ~= nil and GParam.ts_mode then
          GParam.deposize = row.cbplimit
          row = nil
        end
      end
    end
  end
end
local function KillOrder(ordernum)
  local Transaction = {}
  local trans_id = os_time() + GParam.ts_num * 2592000 + trans_num
  trans_num = trans_num + 1
  Transaction = {
    TRANS_ID = tostring(trans_id),
    ACCOUNT = GParam.account,
    CLASSCODE = GParam.classcode,
    SECCODE = GParam.security,
    ACTION = "KILL_ORDER",
    ORDER_KEY = tostring(ordernum)
  }
  if GParam.fldebug then
    Msg2Log(table_tostring(Transaction), 1)
  end
  local Res = sendTransaction(Transaction)
  Transaction = nil
  if Res ~= "" then
    Msg2Log("\206\248\232\225\234\224 \242\240\224\237\231\224\234\246\232\232 " .. trans_id .. " " .. Res, 0)
    Res = nil
    return 0
  end
  Res = nil
  return trans_id
end
local function SetOrder(operation, qty, type_order, price)
  local Res = ""
  if operation == nil or qty == nil or type_order == nil then
    Res = "\205\229 \231\224\228\224\237\251 \238\225\255\231\224\242\229\235\252\237\251\229 \239\224\240\224\236\229\242\240\251 \228\235\255 \242\240\224\237\231\224\234\246\232\232"
    Msg2Log(Res, 0)
    return 0, Res
  end
  local Transaction = {}
  local price_order = 0
  local trans_id = os_time() + GParam.ts_num * 2592000 + trans_num
  trans_num = trans_num + 1
  if type_order == "L" then
    if price == nil or price == 0 then
      Res = "\205\229 \231\224\228\224\237\224 \246\229\237\224 \228\235\255 \235\232\236\232\242\237\238\233 \231\224\255\226\234\232"
      Msg2Log(Res, 0)
      return 0, Res
    end
    price_order = price
  elseif GParam.spot == 1 and type_order == "MM" then
    price_order = 0
  else
    local sign = 1
    if operation == "B" then
      if type_order == "MM" then
        price_order = tonumber(getParamEx(GParam.classcode, GParam.security, "PRICEMAX").param_value)
      else
        price_order = tonumber(getParamEx(GParam.classcode, GParam.security, "OFFER").param_value) + GParam.slip
      end
    else
      if type_order == "MM" then
        price_order = tonumber(getParamEx(GParam.classcode, GParam.security, "PRICEMIN").param_value)
      else
        price_order = tonumber(getParamEx(GParam.classcode, GParam.security, "BID").param_value) - GParam.slip
      end
      sign = -1
    end
    if tonumber(price_order) == 0 then
      price_order = tonumber(getParamEx(GParam.classcode, GParam.security, "LAST").param_value) + sign * GParam.slip
    end
    sign = nil
  end
  Transaction = {
    TRANS_ID = tostring(trans_id),
    ACCOUNT = GParam.account,
    CLASSCODE = GParam.classcode,
    SECCODE = GParam.security,
    ACTION = "NEW_ORDER",
    TYPE = "L",
    OPERATION = operation,
    PRICE = toPrice(price_order),
    QUANTITY = tostring(qty),
    CLIENT_CODE = "ME_" .. GParam.ts_id
  }
  if GParam.spot == 1 then
    Transaction.CLIENT_CODE = GParam.client_code .. "/"
    if type_order == "MM" then
      Transaction.TYPE = "M"
    end
  end
  if GParam.fldebug then
    Msg2Log(table_tostring(Transaction), 1)
  end
  Res = sendTransaction(Transaction)
  Transaction, price_order = nil, nil
  if Res ~= "" then
    Msg2Log("\206\248\232\225\234\224 \242\240\224\237\231\224\234\246\232\232 " .. tostring(trans_id) .. " " .. Res, 0)
    Res = nil
    return 0
  end
  Res = nil
  return trans_id
end
local function KillActiveOrders()
  local row = {}
  local ordernum = getNumberOf("orders")
  for i = 0, ordernum - 1 do
    row = getItem("orders", i)
    if band(row.flags, 1) ~= 0 and row.sec_code == GParam.security and row.account == GParam.account and row.brokerref:find("ME_" .. GParam.ts_id) ~= nil then
      KillOrder(row.order_num)
      Msg2Log("\211\228\224\235\229\237\232\229 \231\224\226\232\241\248\229\233 \231\224\255\226\234\232 " .. row.order_num .. " | " .. row.sec_code .. " | " .. row.account .. " | " .. row.brokerref, 3)
    end
  end
  row, ordernum = nil, nil
end
local function SetTrade(operation, qty, type_order, price)
  local ordertime = 0
  local ordernumatt = 0
  local type_order_l = type_order
  local qty_l = qty
  local trades_qty = 0
  local sp = sec_arr[1]
  if GParam.spot == 0 then
    sp = tonumber(getParamEx(GParam.classcode, GParam.security, "STEPPRICE").param_value)
  end
  if operation == "S" and 0 < PosParam.currqty and qty > PosParam.currqty then
    qty_l = PosParam.currqty
  end
  if operation == "B" and 0 > PosParam.currqty and qty > -1 * PosParam.currqty then
    qty_l = -1 * PosParam.currqty
  end
  PosParam.pricetrades = 0
  PosParam.valuetrades = 0
  if PosParam.currqty == 0 then
    PosParam.pos_id = GParam.ts_id .. "_" .. operation .. tostring(os_time())
  end
  if qty_l > 0 then
    trans_active.flagactive = true
    trans_active.order_qty = qty_l
    trans_active.curr_qty = 0
    if GParam.ts_mode then
      while trans_active.flagactive and trans_active.order_qty ~= trans_active.curr_qty and ordernumatt <= GParam.ordernumattempts do
        if ordernumatt == GParam.ordernumattempts then
          type_order_l = "MM"
        end
        trans_active.trans_checked = false
        trans_active.order_num = 0
        trans_active.order_status = 0
        trade_active = {}
        trans_active.trans_id = SetOrder(operation, trans_active.order_qty - trans_active.curr_qty, type_order_l, price)
        if trans_active.trans_id == 0 then
          trans_active.flagactive = false
        end
        ordertime = os_time() + GParam.orderlifetime
        while trans_active.flagactive and ordertime > os_time() do
          sleep(20)
        end
        if trans_active.order_qty ~= trans_active.curr_qty and trans_active.order_num ~= 0 and trans_active.order_status ~= 2 then
          KillOrder(trans_active.order_num)
          ordertime = os_time() + GParam.orderlifetime
          while trans_active.flagactive and ordertime > os_time() and trans_active.order_status ~= 3 do
            sleep(20)
          end
        end
        if trans_active.order_status == 2 then
          trans_active.flagactive = false
        end
        ordernumatt = ordernumatt + 1
      end
      trans_active.flagactive = false
      if trans_active.order_status == 2 and trans_active.order_qty ~= trans_active.curr_qty then
        PosParam.pricetrades = (PosParam.pricetrades * trans_active.curr_qty + tonumber(getParamEx(GParam.classcode, GParam.security, "LAST").param_value) * (trans_active.order_qty - trans_active.curr_qty)) / trans_active.order_qty
        PosParam.valuetrades = PosParam.pricetrades * sp * trans_active.curr_qty * sec_arr[5] / sec_arr[1]
        trans_active.curr_qty = trans_active.order_qty
      end
      trades_qty = trans_active.curr_qty
    else
      trans_active.flagactive = false
      PosParam.pricetrades = tonumber(getParamEx(GParam.classcode, GParam.security, "LAST").param_value)
      PosParam.valuetrades = PosParam.pricetrades * sp * qty_l * sec_arr[5] / sec_arr[1]
      trades_qty = qty_l
    end
    if 0 < PosParam.valuetrades then
      sleep(20)
      local sign = 1
      if operation == "S" then
        sign = -1
      end
      if PosParam.currqty ~= 0 then
        if 0 < PosParam.currqty then
          PosParam.valuepos = PosParam.valuepos + sign * PosParam.valuetrades
        else
          PosParam.valuepos = PosParam.valuepos - sign * PosParam.valuetrades
        end
        local currqty_l = math_abs(PosParam.currqty)
        PosParam.currqty = PosParam.currqty + sign * trades_qty
        if currqty_l < math_abs(PosParam.currqty) then
          PosParam.priceenter = (PosParam.priceenter * currqty_l + PosParam.pricetrades * trades_qty) / (currqty_l + trades_qty)
          PosParam.flagprofitmade = false
          if btn_arr.fl then
            PosParam.startqty[PosParam.tradedir] = PosParam.startqty[PosParam.tradedir] + trades_qty
            SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[PosParam.tradedir]))
          end
          EditStopArrL(math_abs(PosParam.currqty), sign, true)
          PosParam.flagnull = true
          startqty = 0
          if not btn_arr.fl and level_num > 0 then
            level_arr[level_num][1] = PosParam.pricetrades
            level_arr[level_num][3] = trades_qty
            level_arr[level_num][4] = false
            EditLevelTbl(level_num)
            level_num = 0
          else
            btn_arr.fl = false
          end
          tparam_renew1(5, PosParam.priceenter)
        elseif currqty_l > math_abs(PosParam.currqty) then
          local profitpr_p = PosParam.profitpr
          PosParam.profitpos = PosParam.profitpos + sign * (PosParam.priceenter - PosParam.pricetrades) * sp * trades_qty * sec_arr[5] / sec_arr[1]
          PosParam.profitpr = PosParam.profitpos / GParam.deposize * 100
          PosParam.profitday = PosParam.profitday + PosParam.profitpr - profitpr_p
          PosParam.profitdaybl = PosParam.profitdaybl + PosParam.profitpr - profitpr_p
          tparam_renew1(6, PosParam.profitpr)
          tparam_renew1(7)
          btn_arr.qty = 0
          if sign == 1 then
            PosParam.startqty[2] = PosParam.startqty[2] - trades_qty
          else
            PosParam.startqty[1] = PosParam.startqty[1] - trades_qty
          end
          SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[PosParam.tradedir]))
          if PosParam.flaglongadd or PosParam.flagshortadd then
            PosParam.clplusqty = PosParam.clplusqty + trades_qty
          end
          if PosParam.flagstop then
            PosParam.stop_arr[PosParam.currcountersc][4] = PosParam.stop_arr[PosParam.currcountersc][4] - trades_qty
            if 0 >= PosParam.stop_arr[PosParam.currcountersc][4] then
              PosParam.stop_arr[PosParam.currcountersc][6] = false
            end
            if PosParam.stop_arr[PosParam.currcountersc][7] == 2 then
              PosParam.flagprofitmade = true
              if GParam.flagdepobl then
                PosParam.depoblock = PosParam.depoblock + trades_qty * sec_arr[3]
                tparam_renew1(10, PosParam.depoblock)
                InitDepo()
              end
              PosParam.clplusqty = PosParam.clplusqty + trades_qty
            end
            EditStopTbl(PosParam.currcountersc)
          end
          btn_arr.fl = false
        end
        tparam_renew1(4, PosParam.currqty)
        if PosParam.currqty == 0 then
          if PosParam.flagstop then
            PosParam.flagstopmade = true
          end
          if PosParam.flagprofit then
            PosParam.flagprofitmade = true
          end
          if 0 < GParam.block_qty and PosParam.profitday <= -1 * GParam.block_qty then
            BlockOnDay()
          elseif 0 < GParam.block_pft and PosParam.profitday >= GParam.block_pft then
            BlockOnDay()
          elseif PosParam.profitpr < -1 * GParam.block_stp then
            PosParam.countblock = PosParam.countblock + 1
            InitDepo()
            if PosParam.timeblock == 0 and 1 <= PosParam.countblock then
              PosParam.timeblock = os_time() + GParam.block_time
            end
          end
          if GParam.fldepominus then
            if PosParam.profitpr < -1 * GParam.block_stp / PosParam.kfdepominus and 0 > PosParam.profitdaybl then
              PosParam.fldepominus = true
              PosParam.kfdepominus = PosParam.kfdepominus * GParam.kfdepominus
              InitDepo()
            elseif PosParam.profitpr > GParam.block_stp2 / PosParam.kfdepominus and 0 > PosParam.profitdaybl and 1 < PosParam.kfdepominus then
              PosParam.kfdepominus = PosParam.kfdepominus / GParam.kfdepominus
              if 1 > PosParam.kfdepominus then
                PosParam.kfdepominus = 1
              end
              InitDepo()
            elseif 0 < PosParam.profitdaybl then
              PosParam.fldepominus = false
              PosParam.kfdepominus = 1
              InitDepo()
            end
          end
          PosParam.timepos = os_time() + GParam.timepos
          fltimepos = true
          PosParam.pricestop = 0
          PosParam.priceprofit = 0
          PosParam.currcountersc = 0
          PosParam.aaperc = 0
          PosParam.aapercsh = 0
          PosParam.ssperc = 0
          PosParam.pricepeak = 0
          PosParam.stopshift = 0
          PosParam.numpos = 0
          level_num = 0
          flposclose = true
          LevelWork()
          PosParam.flagnull = true
          PosParam.flagsl = true
          PosParam.flagsl2 = true
          PosParam.qtysl = 0
          PosParam.clplusqty = 0
          InitStopArr()
          if PosParam.flcoupgate then
            local trlvl = iif(sign == 1, 1, 2)
            local i = 0
            local j = 0
            for i = 3, #level_arr do
              if level_arr[i][7] == trlvl and level_arr[i][4] and 0 < level_arr[i][3] then
                j = j + 1
              end
            end
            if j > 0 then
              if #level_arr > 2 then
                trlvl = iif(sign == 1, 2, 1)
                for i = 3, #level_arr do
                  if level_arr[i][7] == trlvl then
                    level_arr[i][4] = false
                    EditLevelTbl(i)
                  end
                end
              end
            else
              PosParam.flagwork = false
              delalllevel_arr()
            end
          else
            PosParam.flagwork = false
            delalllevel_arr()
          end
        end
      else
        PosParam.valuepos = PosParam.valuetrades
        PosParam.profitpos = 0
        PosParam.profitpr = 0
        PosParam.profitposlvl = 0
        PosParam.pricepos = PosParam.pricetrades
        PosParam.priceenter = PosParam.pricetrades
        PosParam.currqty = sign * trades_qty
        PosParam.clplusqty = 0
        PosParam.pricestop = 0
        PosParam.priceprofit = 0
        PosParam.flagstopmade = false
        PosParam.flagprofitmade = false
        PosParam.currcountersc = 1
        PosParam.aaperc = 1
        PosParam.aapercsh = 1
        PosParam.ssperc = 1
        PosParam.pricepeak = 0
        PosParam.stopshift = 0
        startqty = 0
        PosParam.flagnull = true
        PosParam.flnullpos = true
        PosParam.flagsl = true
        PosParam.flagsl2 = true
        PosParam.qtysl = 0
        if flagsl then
          SetCell(ta_id[1], 14, 2, tostring(PosParam.qtysl) .. " \232\231 " .. tostring(GParam.qtysl))
        end
        if btn_arr.fl then
          PosParam.startqty[PosParam.tradedir] = PosParam.startqty[PosParam.tradedir] + trades_qty
          SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[PosParam.tradedir]))
        end
        EditStopArrL(trades_qty, sign, true)
        if not PosParam.flcoupgate and #level_arr > 2 then
          local trlvl = iif(PosParam.tradedir == 1, 2, 1)
          local i = 0
          for i = 3, #level_arr do
            if level_arr[i][7] == trlvl then
              level_arr[i][4] = false
              EditLevelTbl(i)
            end
          end
        end
        if not btn_arr.fl and level_num > 0 then
          level_arr[level_num][1] = PosParam.pricetrades
          level_arr[level_num][3] = trades_qty
          level_arr[level_num][4] = false
          EditLevelTbl(level_num)
          level_num = 0
        else
          btn_arr.fl = false
        end
        tparam_renew1(4, PosParam.currqty)
        tparam_renew1(5, PosParam.priceenter)
        tparam_renew1(6, PosParam.profitpr)
      end
      if GParam.ts_mode then
        qty_l = getPositionFut()
        ordertime = os_time() + GParam.positionlifetime
        while PosParam.currqty ~= qty_l and ordertime > os_time() do
          qty_l = getPositionFut()
          sleep(10)
        end
        if PosParam.currqty ~= qty_l then
          message("\210\240\224\237\231\224\234\246\232\255: " .. tostring(trans_active.trans_id) .. " \202\238\235-\226\238 \234\238\237\242\240\224\234\242\238\226 \226 \240\238\225\238\242\229:" .. tostring(PosParam.currqty) .. " \226 \242\229\240\236\232\237\224\235\229: " .. tostring(qty_l))
        end
      elseif flaglabels then
        AddLabelGraf(PosParam.pricetrades, operation, PosParam.signalname, 0)
      end
      Trade2Log()
      PosParam_save()
    elseif PosParam.currqty == 0 or PosParam.tradedir == 1 and operation == "B" or PosParam.tradedir == 2 and operation == "S" then
      if not btn_arr.fl and level_num > 0 and level_arr[level_num][3] ~= nil then
        message("\210\240\224\237\231\224\234\246\232\255 " .. tostring(trans_active.trans_id) .. " \237\229 \241\240\224\225\238\242\224\235\224 \239\238 \243\240\238\226\237\254 " .. tostring(level_num) .. ". \202\238\237\242\240\224\234\242\251 " .. tostring(level_arr[level_num][3]) .. ". \207\238\236\229\247\224\229\236 \232\241\239\238\235\237\229\237\237\251\236.")
        Msg2Log("\210\240\224\237\231\224\234\246\232\255 " .. tostring(trans_active.trans_id) .. " \237\229 \241\240\224\225\238\242\224\235\224 \239\238 \243\240\238\226\237\254 " .. tostring(level_num) .. ". \202\238\237\242\240\224\234\242\251 " .. tostring(level_arr[level_num][3]) .. ". \207\238\236\229\247\224\229\236 \232\241\239\238\235\237\229\237\237\251\236.", 0)
        PosParam.startqty[PosParam.tradedir] = PosParam.startqty[PosParam.tradedir] - level_arr[level_num][3]
        level_arr[level_num][3] = 0
        level_arr[level_num][4] = false
        EditLevelTbl(level_num)
        PosParam_save()
      else
        btn_arr.fl = false
      end
    else
      Msg2Log("\210\240\224\237\231\224\234\246\232\255 " .. tostring(trans_active.trans_id) .. " \237\229 \241\240\224\225\238\242\224\235\224 \239\238 \241\242\238\239\243. \202\238\237\242\240\224\234\242\251 " .. tostring(qty_l) .. ".", 0)
      btn_arr.fl = false
    end
  end
end
function OnInit()
  is_run = true
  local connect_term = isConnected()
  if connect_term == 1 then
    is_connect = true
  else
    is_connect = false
  end
end
function OnStop()
  local i = 0
  Msg2Log("\206\241\242\224\237\238\226\234\224 \240\224\225\238\242\251 \241\234\240\232\239\242\224", 1)
  Level_arr_save()
  WChkLabels()
  DelAllLabels(GParam.price_chart)
  label_pos = nil
  close_logs()
  PosParam.pos_arr = {}
  if GParam.flagtparam then
    GParam.flagtparam = false
    if ta_id[1] ~= nil and not IsWindowClosed(ta_id[1]) then
      PosParam.pos_arr.i = {}
      PosParam.pos_arr.i[2], PosParam.pos_arr.i[1], PosParam.pos_arr.i[4], PosParam.pos_arr.i[3] = GetWindowRect(ta_id[1])
      PosParam.pos_arr.i[3] = PosParam.pos_arr.i[3] - PosParam.pos_arr.i[1]
      PosParam.pos_arr.i[4] = PosParam.pos_arr.i[4] - PosParam.pos_arr.i[2]
      DestroyTable(ta_id[1])
    end
  end
  if ta_id[2] ~= nil and not IsWindowClosed(ta_id[2]) then
    PosParam.pos_arr.l = {}
    PosParam.pos_arr.l[2], PosParam.pos_arr.l[1], PosParam.pos_arr.l[4], PosParam.pos_arr.l[3] = GetWindowRect(ta_id[2])
    PosParam.pos_arr.l[3] = PosParam.pos_arr.l[3] - PosParam.pos_arr.l[1]
    PosParam.pos_arr.l[4] = PosParam.pos_arr.l[4] - PosParam.pos_arr.l[2]
    DestroyTable(ta_id[2])
  end
  if ta_id[3] ~= nil and not IsWindowClosed(ta_id[3]) then
    PosParam.pos_arr.s = {}
    PosParam.pos_arr.s[2], PosParam.pos_arr.s[1], PosParam.pos_arr.s[4], PosParam.pos_arr.s[3] = GetWindowRect(ta_id[3])
    PosParam.pos_arr.s[3] = PosParam.pos_arr.s[3] - PosParam.pos_arr.s[1]
    PosParam.pos_arr.s[4] = PosParam.pos_arr.s[4] - PosParam.pos_arr.s[2]
    DestroyTable(ta_id[3])
  end
  if ta_id[4] ~= nil and not IsWindowClosed(ta_id[4]) then
    PosParam.pos_arr.t = {}
    PosParam.pos_arr.t[2], PosParam.pos_arr.t[1], PosParam.pos_arr.t[4], PosParam.pos_arr.t[3] = GetWindowRect(ta_id[4])
    PosParam.pos_arr.t[3] = PosParam.pos_arr.t[3] - PosParam.pos_arr.t[1]
    PosParam.pos_arr.t[4] = PosParam.pos_arr.t[4] - PosParam.pos_arr.t[2]
    DestroyTable(ta_id[4])
  end
  PosParam_save()
  is_run = false
end
function OnConnected()
  timecnct_s = os_time() + GParam.timecnct
  Msg2Log("\194\238\241\241\242\224\237\238\226\235\229\237\232\229 \241\238\229\228\232\237\229\237\232\255 \241 \241\229\240\226\229\240\238\236", 0)
  btn_arr.fl = false
  is_connect = true
end
function OnDisconnected()
  Msg2Log("\207\238\242\229\240\255 \241\238\229\228\232\237\229\237\232\255 \241 \241\229\240\226\229\240\238\236", 0)
  is_connect = false
  PosParam_save()
end
function OnTransReply(trans_reply)
  if trans_active.flagactive and not trans_active.trans_checked and trans_active.trans_id == trans_reply.trans_id then
    if GParam.fldebug then
      Msg2Log(table_tostring(trans_reply), 1)
    end
    if GParam.spot == 0 and trans_reply.brokerref:find("ME_" .. GParam.ts_id) == nil then
      return
    end
    local status = trans_reply.status
    if status == 3 then
      trans_active.order_num = trans_reply.order_num
      if trans_active.order_num ~= 0 and trans_active.order_num ~= nil then
        trans_active.trans_checked = true
      end
    elseif status == 2 or status > 3 then
      trans_active.trans_checked = true
      trans_active.order_num = 0
      if status == 4 then
        Msg2Log("\210\240\224\237\231\224\234\246\232\255 \237\229 \226\251\239\238\235\237\229\237\224 \242\238\240\227\238\226\238\233 \241\232\241\242\229\236\238\233 " .. trans_reply.result_msg .. " N " .. trans_active.trans_id, 0)
      elseif status == 6 then
        Msg2Log("\210\240\224\237\231\224\234\246\232\255 \237\229 \239\240\238\248\235\224 \239\240\238\226\229\240\234\243 \235\232\236\232\242\238\226 \241\229\240\226\229\240\224 QUIK " .. trans_active.trans_id, 0)
      else
        Msg2Log("\206\248\232\225\234\224 \226 \242\240\224\237\231\224\234\246\232\232. \202\238\228 " .. tostring(status) .. " N " .. trans_active.trans_id, 0)
      end
      trans_active.flagactive = false
    end
  end
end
function OnOrder(order)
  if trans_active.flagactive and (trans_active.trans_id == order.trans_id or trans_active.order_num == order.order_num) then
    if GParam.fldebug then
      Msg2Log("\199\224\255\226\234\224: trans_id " .. tostring(order.trans_id) .. " order_num " .. tostring(order.order_num) .. " flags " .. tostring(order.flags) .. " com " .. order.brokerref, 1)
    end
    if GParam.spot == 0 and order.brokerref:find("ME_" .. GParam.ts_id) == nil then
      return
    end
    if trans_active.order_num == 0 then
      trans_active.order_num = order.order_num
    end
    if band(order.flags, 1) ~= 0 then
      trans_active.order_status = 1
    elseif band(order.flags, 2) == 0 then
      trans_active.order_status = 2
    end
    if band(order.flags, 2) ~= 0 then
      trans_active.order_status = 3
    end
  end
end
function OnTrade(trade)
  if trans_active.flagactive and (trans_active.trans_id == trade.trans_id or trans_active.order_num == trade.order_num) then
    if GParam.fldebug then
      Msg2Log("\209\228\229\235\234\224: trans_id " .. tostring(trade.trans_id) .. " order_num " .. tostring(trade.order_num) .. " flags " .. tostring(trade.flags) .. " qty " .. tostring(trade.qty) .. " value " .. tostring(trade.value) .. " price " .. tostring(trade.price) .. " com " .. trade.brokerref, 1)
    end
    if GParam.spot == 0 and trade.brokerref:find("ME_" .. GParam.ts_id) == nil then
      return
    end
    for i = 1, #trade_active do
      if trade_active[i] == trade.trade_num then
        return
      end
    end
    if trade.qty > 0 and trade.value > 0 then
      local nNum = #trade_active + 1
      trade_active[nNum] = 0
      trade_active[nNum] = trade.trade_num
      PosParam.pricetrades = (PosParam.pricetrades * trans_active.curr_qty + trade.price * trade.qty) / (trans_active.curr_qty + trade.qty)
      PosParam.valuetrades = PosParam.valuetrades + trade.value
      trans_active.curr_qty = trans_active.curr_qty + trade.qty
      if trans_active.order_qty == trans_active.curr_qty then
        trans_active.flagactive = false
      end
    end
  end
end
function main()
  local flaginit = true
  local i = 0
  if ME_Init_GParam ~= nil then
    ME_Init_GParam()
  end
  if GParam.security == "" or GParam.classcode == "" or GParam.account == "" or GParam.ts_log_m == "" then
    message("\205\229 \231\224\239\238\235\237\229\237\224 \242\224\225\235\232\246\224 \227\235\238\225\224\235\252\237\251\245 \239\224\240\224\236\229\242\240\238\226. \194\251\245\238\228 \232\231 \241\234\240\232\239\242\224.")
    return
  end
  local acc = dec("NzY2MWdxM1NQQkZVVDAwTk1HNzY0MGxqNTc2MjFDMkU3NjU1bXJ0NzY1NW4yYzc2NTV3am83NjU1dnR0NzY2MWRyZjc2NTV2dm4xNTAwMXdnNzY0MGp0Njc2NTU0b3UzNzc3MDRSMjVBRjBuMGE1NzY0MGp0eDc2NDB6OW03NjQwOWRuNzY0MGpzeTc2NTVneXlTUEJGVVQwMDdWNjc2NDBqbGhTUEJGVVQxN0pSRzc2NTVtZmg0MTEwUFk3NzYwMHVhNjc2MThmMmg3NjU1bjByNDEwMjFaRzQxMDIxWkhTUEJGVVQwMElXV1NQQkZVVDAwS1FONzY0MDNjYjc2NDBqd3E3NjYxMjl0NzY2MTJjYjE1MDBianA3NjU1OG1vNzY2MTM0aTc2NTVraDlSMEZNOEgzNzY2MWR2czc2MTgxR0RTUEJGVVQxNzM0ODc2NDBqdHE3NjU1MDF5NzY1NWVzNU1CMDA2MTkwNDk1OTM2MzIyMFIyMFNTUEJGVVQwMDdyTTQwNTUyNFIzMkVZNDEwM0E3NDc2NjFpOG43NjYxMmRlNzY2MWdnODQxNjM4N1IzRlBINzY2MWJ4MDc2NjFncWk3NjYxaWVzNzY2MTN6bTc2MDBvamRNQjAwMDA1MDYwNjFTUEJGVVQwMDdSRjc2NjFoaHY3NjY0d283NzY2MW5mYzQyMjI5N1IzTUZSNDExMDRRNTc2NjFoemY3NjU1bnV1NDEwMlJMUzQxMDBJOU03NjYxaGdjNzY1NW5sdDc2NjFpMjU3NjYxZ2ZpNzY2MWlwcjQxMDNFSzY3NjYxZzY5MTU4NzAzUjNGRlNOQjAyNTM5NzQ1MzlTUEJGVVQwMDJiNVNQQkZVVEQ5RE42U1BCRlVURDlJWDdN")
  if string.find(acc, GParam.account) == nil and string.find(acc, GParam.client_code) == nil then
    message("\205\229 \237\224\233\228\229\237 \241\247\229\242 \241\240\229\228\232 \240\224\231\240\229\248\229\237\237\251\245. \194\251\245\238\228 \232\231 \241\234\240\232\239\242\224.")
    return
  end
  if string.find(acc, GParam.client_code) == nil then
    message("\205\229 \237\224\233\228\229\237 \234\238\228 \234\235\232\229\237\242\224 \241\240\229\228\232 \240\224\231\240\229\248\229\237\237\251\245. \194\251\245\238\228 \232\231 \241\234\240\232\239\242\224.")
    return
  end
  init_logs()
  local datetime = {}
  datetime = os_date("!*t", os.time())
  datetime.hour, datetime.min, datetime.sec = string_match(GParam.etstart, "(%d%d)%p(%d%d)%p(%d%d)")
  etstart = os_time(datetime)
  barpostime = os_time()
  if PosParam_load() then
    Msg2Log("\212\224\233\235 \239\224\240\224\236\229\242\240\238\226 \231\224\227\240\243\230\229\237.", 1)
  else
    PosParam_save()
    Msg2Log("\212\224\233\235 \239\224\240\224\236\229\242\240\238\226 \237\229 \241\244\238\240\236\232\240\238\226\224\237. \212\238\240\236\232\240\243\229\236 \237\238\226\251\233.", 1)
  end
  if PosParam.numpos == nil then
    PosParam.numpos = 0
  end
  PosParam.flagposstoplifetime = 0
  if PosParam.qtysl == nil then
    PosParam.qtysl = 0
  end
  if PosParam.lvl_arr == 0 or PosParam.lvl_arr == nil then
    PosParam.lvl_arr = GParam.lvl_arr[1]
  end
  if PosParam.timepos == nil then
    PosParam.timepos = os_time() + GParam.timepos
  end
  if PosParam.flnullpos == nil then
    PosParam.flnullpos = true
  end
  if PosParam.profitday == nil then
    PosParam.profitday = 0
  end
  if PosParam.profitdaybl == nil then
    PosParam.profitdaybl = PosParam.profitday
  end
  if PosParam.profitpr == nil then
    PosParam.profitpr = 0
  end
  if GParam.qtysl == 0 then
    flagsl = false
  end
  if PosParam.flcoupgate == nil then
    PosParam.flcoupgate = false
  end
  if not GParam.fldepominus then
    PosParam.fldepominus = false
    PosParam.kfdepominus = 1
  end
  if PosParam.fldepominus == nil then
    PosParam.fldepominus = false
  end
  if PosParam.kfdepominus == nil then
    PosParam.kfdepominus = 1
  end
  if PosParam.flbtlongclose == nil then
    PosParam.flbtlongclose = false
  end
  if PosParam.flbtshortclose == nil then
    PosParam.flbtshortclose = false
  end
  if GParam.aaperc ~= nil then
    if 0 < #GParam.aaperc then
      for i = 1, #GParam.aaperc do
        GParam.aaperc[i][1] = GParam.aaperc[i][1] / 100
      end
    end
  else
    GParam.aaperc = {}
  end
  if GParam.aapercsh ~= nil then
    if 0 < #GParam.aapercsh then
      for i = 1, #GParam.aapercsh do
        GParam.aapercsh[i][1] = GParam.aapercsh[i][1] / 100
      end
    end
  else
    GParam.aapercsh = {}
  end
  if GParam.stopshift ~= nil then
    if 0 < #GParam.stopshift then
      for i = 1, #GParam.stopshift do
        GParam.stopshift[i][1] = GParam.stopshift[i][1] / 100
        if 1 < GParam.stopshift[i][1] then
          GParam.stopshift[i][1] = 1
        end
      end
    end
  else
    GParam.stopshift = {}
  end
  flaglabels = true
  timelabel = os_time() + GParam.timelabel
  if #GParam.trdchar == 6 then
    for i = 1, #GParam.trdchar do
      GParam.trdchar[i] = string.upper(string.sub(GParam.trdchar[i], 1, 1))
    end
  else
    GParam.trdchar = {}
  end
  if GParam.flblock and GParam.ts_blck ~= "" and GParam.flblockwrt then
    local f, err = io.open(GParam.ts_blck, "r")
    if not f then
      message(GParam.ts_id .. " " .. " " .. err)
      table_tofile(GParam.ts_blck, 0, 1)
    end
  end
  ttrd_init()
  tparam_init1(true)
  tlvls_init1()
  InitStopArr()
  tstop_init()
  if #level_arr == 0 then
    AddLvl(PosParam.tradedir, false)
    AddLvl(PosParam.tradedir, false)
  end
  while is_run do
    if is_connect then
      if SessionRun() then
        if flaginit then
          if GParam.ts_mode then
            KillActiveOrders()
          end
          i = tonumber(getParamEx(GParam.classcode, GParam.security, "SEC_PRICE_STEP").param_value)
          if i > 0 then
            sec_arr[1] = i
          else
            message("\205\229\226\238\231\236\238\230\237\238 \239\238\235\243\247\232\242\252 \248\224\227 \232\237\241\242\240\243\236\229\237\242\224!")
            OnStop()
          end
          i = -1
          i = tonumber(getParamEx(GParam.classcode, GParam.security, "SEC_SCALE").param_value)
          if i >= 0 then
            sec_arr[2] = i
          end
          if 0 >= GParam.slip then
            GParam.slip = sec_arr[1] * 2
          end
          if 0 >= GParam.lvl_slip then
            GParam.lvl_slip = sec_arr[1] * 2
          end
          if GParam.spot == 1 then
            i = -1
            i = tonumber(getParamEx(GParam.classcode, GParam.security, "LOTSIZE").param_value)
            if i > 0 then
              sec_arr[5] = i
            end
            sec_arr[3] = tonumber(getParamEx(GParam.classcode, GParam.security, "LAST").param_value) * sec_arr[5]
          else
            sec_arr[3] = tonumber(getParamEx(GParam.classcode, GParam.security, "BUYDEPO").param_value)
          end
          if sec_arr[3] == 0 and GParam.fldebug then
            Msg2Log("\195\206 \239\240\238\228\224\226\246\224 \240\224\226\237\238 0", 1)
          end
          if GParam.spot == 1 then
            GParam.flagchdepo = false
          end
          getFutLimit()
          InitDepo()
          if PosParam.currqty == 0 then
            CheckStop()
          end
          if PosParam.currqty == 0 then
            level_arr[1][4] = PosParam.flagwork
            Level_arr_save()
          end
          barpostime = 0
          flagwork_l = PosParam.flagwork
          LevelWork()
          flaginit = false
        end
        if not trans_active.flagactive and is_run then
          if GParam.ts_mode then
            if PosParam.flagwork or os_time() <= PosParam.timepos or PosParam.currqty ~= 0 then
              local currqty = getPositionFut()
              if currqty ~= 999999 and PosParam.currqty ~= currqty then
                Msg2Log("\205\229\241\238\226\239\224\228\229\237\232\229 \234\238\235\232\247\229\241\242\226\224 \234\238\237\242\240\224\234\242\238\226 \226 \242\224\225\235\232\246\229 \239\238\231\232\246\232\233 \239\238 \234\235\232\229\237\242\241\234\232\236 \241\247\229\242\224\236 " .. tostring(currqty) .. " \232 \226 \242\224\225\235\232\246\229 \239\224\240\224\236\229\242\240\238\226 " .. tostring(PosParam.currqty), 2)
                local abscqty = math_abs(PosParam.currqty)
                local sp = sec_arr[1]
                if GParam.spot == 0 then
                  sp = tonumber(getParamEx(GParam.classcode, GParam.security, "STEPPRICE").param_value)
                end
                if 0 < PosParam.currqty and currqty < 0 or 0 > PosParam.currqty and currqty > 0 then
                  flagposclose = true
                  if GParam.fldebug then
                    Msg2Log("\199\224\234\240\251\242\232\229 \239\238\231\232\246\232\232 \232\231-\231\224 \239\238\239\251\242\234\232 \240\243\247\237\238\227\238 \239\229\240\229\226\238\240\238\242\224", 1)
                  end
                elseif abscqty < math_abs(currqty) then
                  PosParam.pricetrades = tonumber(getParamEx(GParam.classcode, GParam.security, "LAST").param_value)
                  PosParam.valuetrades = PosParam.pricetrades * sp * math_abs(currqty - PosParam.currqty) * sec_arr[5] / sec_arr[1]
                  PosParam.valuepos = PosParam.valuepos + PosParam.valuetrades
                  if PosParam.currqty == 0 then
                    PosParam.profitpos = 0
                    PosParam.profitpr = 0
                    PosParam.pricepos = PosParam.pricetrades
                    PosParam.priceenter = PosParam.pricetrades
                    PosParam.aaperc = 1
                    PosParam.aapercsh = 1
                    PosParam.ssperc = 1
                    PosParam.pricepeak = 0
                    PosParam.stopshift = 0
                    PosParam.clplusqty = 0
                    PosParam.pricestop = 0
                    PosParam.priceprofit = 0
                    PosParam.flagstopmade = false
                    PosParam.currcountersc = 1
                    PosParam.flnullpos = true
                    PosParam.flagsl = true
                    PosParam.flagsl2 = true
                    PosParam.qtysl = 0
                    if flagsl then
                      SetCell(ta_id[1], 14, 2, tostring(PosParam.qtysl) .. " \232\231 " .. tostring(GParam.qtysl))
                    end
                    tparam_renew1(6, PosParam.profitpr)
                    if currqty > 0 then
                      if PosParam.tradedir ~= 1 then
                        PosParam.tradedir = 1
                        SetCell(ta_id[2], 3, 2, "\207\206\202\211\207\202\192")
                        SetColor(ta_id[2], 3, 2, GREEN, -1, GREEN, -1)
                      end
                      level_arr[1][1] = PosParam.priceenter + GParam.cor_shift
                      DelLabel(GParam.price_chart, level_arr[1][5])
                      if GParam.fldebug then
                        Msg2Log("\203\238\237\227: \207\229\240\229\226\238\228 \230\229\235\242\238\227\238 \243\240\238\226\237\255 \237\224 \243\240\238\226\229\237\252 " .. tostring(level_arr[1][1]), 1)
                      end
                    else
                      if PosParam.tradedir ~= 2 then
                        PosParam.tradedir = 2
                        SetCell(ta_id[2], 3, 2, "\207\208\206\196\192\198\192")
                        SetColor(ta_id[2], 3, 2, RED, -1, RED, -1)
                      end
                      level_arr[1][1] = PosParam.priceenter - GParam.cor_shift
                      DelLabel(GParam.price_chart, level_arr[1][5])
                      if GParam.fldebug then
                        Msg2Log("\216\238\240\242: \207\229\240\229\226\238\228 \230\229\235\242\238\227\238 \243\240\238\226\237\255 \237\224 \243\240\238\226\229\237\252 " .. tostring(level_arr[1][1]), 1)
                      end
                    end
                    SetCell(ta_id[2], 2, 1, toPrice(level_arr[1][1]))
                    if not PosParam.flcoupgate and #level_arr > 2 then
                      local trlvl = iif(PosParam.tradedir == 1, 2, 1)
                      for i = 3, #level_arr do
                        if level_arr[i][7] == trlvl then
                          level_arr[i][4] = false
                          EditLevelTbl(i)
                        end
                      end
                    end
                    if not PosParam.flagwork then
                      PosParam.flagwork = true
                      level_arr[1][4] = PosParam.flagwork
                      flcoup = 0
                      level_arr[2][2] = 0
                      if GParam.fldebug then
                        Msg2Log("\200\231\236\229\237\232\235\241\255 \241\242\224\242\243\241 \240\238\225\238\242\224, \242\229\234\243\249\232\233 " .. tostring(PosParam.flagwork), 2)
                      end
                      LevelWork()
                    end
                  else
                    PosParam.priceenter = (PosParam.priceenter * abscqty + PosParam.pricetrades * math_abs(currqty - PosParam.currqty)) / math_abs(currqty)
                  end
                  startqty = 0
                  PosParam.startqty[PosParam.tradedir] = PosParam.startqty[PosParam.tradedir] + math_abs(currqty - PosParam.currqty)
                  SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[PosParam.tradedir]))
                  PosParam.flagprofitmade = false
                  tparam_renew1(5, PosParam.priceenter)
                  if not level_arr[2][4] then
                    level_arr[2][4] = true
                    SetCell(ta_id[2], 3, 4, "\192\194\210\206\204\192\210")
                    if GParam.fldebug then
                      Msg2Log("\209\242\238\239 \225\251\235 \241\225\240\238\248\229\237 \226 \239\238\231\232\246\232\254 \192\194\210\206\204\192\210", 2)
                    end
                  end
                  PosParam.flagautoadd = false
                  PosParam.currqty = currqty
                  EditStopArrL(math_abs(currqty), PosParam.currqty, true)
                  if GParam.fldebug then
                    Msg2Log("\208\243\247\237\224\255 \241\228\229\235\234\224 \194\213\206\196 \209\221 \246\229\237\251 " .. tostring(PosParam.priceenter) .. " \209\242\238\239" .. tostring(PosParam.pricestop) .. " \211\240\238\226\229\237\252 \193\211 " .. tostring(PosParam.priceprofit) .. " \209\242\238\239-\243\240\238\226\229\237\252 " .. tostring(level_arr[2][1]) .. " MAX \234\238\237\242\240\224\234\242\238\226 " .. tostring(PosParam.totalqty) .. " \195\206 " .. tostring(sec_arr[3]), 1)
                  end
                  PosParam.flagnull = true
                  if GParam.flagblock and os_time() < PosParam.timeblock then
                    if 0 < PosParam.currqty and PosParam.pricetrades > PosParam.priceenter or 0 > PosParam.currqty and PosParam.pricetrades < PosParam.priceenter then
                      PosParam.flnullpos = false
                      if 0 < PosParam.currqty then
                        level_arr[2][1] = PosParam.priceenter + GParam.ranullplus
                      else
                        level_arr[2][1] = PosParam.priceenter - GParam.ranullplus
                      end
                      EditStopArrL(math_abs(currqty), PosParam.currqty, false)
                      if GParam.fldebug then
                        Msg2Log("\207\229\240\229\237\238\241 \241\242\238\239\224 \239\238 \225\235\238\234\232\240\238\226\234\229 \237\224 " .. tostring(level_arr[2][1]) .. " . \194\240\229\236\255 \228\238 \238\234\238\237\247\224\237\232\255 \225\235\238\234\232\240\238\226\234\232: " .. tblock_str, 1)
                      end
                    else
                      flagposclose = true
                      if GParam.fldebug then
                        Msg2Log("\199\224\234\240\251\242\232\229 \239\238\231\232\246\232\232 \239\238 \225\235\238\234\232\240\238\226\234\229. \194\240\229\236\255 \228\238 \238\234\238\237\247\224\237\232\255 \225\235\238\234\232\240\238\226\234\232: " .. tblock_str, 1)
                      end
                    end
                  elseif GParam.flagstoptime and PosParam.flagposstoplifetime == 1 and (flagstoptimestart or abscqty == 0) then
                    flagposclose = true
                    if GParam.fldebug then
                      Msg2Log("\199\224\234\240\251\242\232\229 \239\238\231\232\246\232\232 \239\238 \240\224\241\239\232\241\224\237\232\254.", 1)
                    end
                  end
                  Level_arr_save()
                elseif abscqty > math_abs(currqty) then
                  local sign = 1
                  if 0 > PosParam.currqty then
                    sign = -1
                  end
                  PosParam.pricetrades = tonumber(getParamEx(GParam.classcode, GParam.security, "LAST").param_value)
                  PosParam.valuetrades = PosParam.pricetrades * sp * math_abs(currqty - PosParam.currqty) * sec_arr[5] / sec_arr[1]
                  PosParam.valuepos = PosParam.valuepos - PosParam.valuetrades
                  if sign == 1 then
                    PosParam.startqty[1] = PosParam.startqty[1] - math_abs(currqty - PosParam.currqty)
                  else
                    PosParam.startqty[2] = PosParam.startqty[2] - math_abs(currqty - PosParam.currqty)
                  end
                  SetCell(ta_id[1], 11, 2, tostring(PosParam.startqty[PosParam.tradedir]))
                  local profitpr_p = PosParam.profitpr
                  PosParam.profitpos = PosParam.profitpos + sign * (PosParam.pricetrades - PosParam.priceenter) * sp * math_abs(currqty - PosParam.currqty) * sec_arr[5] / sec_arr[1]
                  PosParam.profitpr = PosParam.profitpos / GParam.deposize * 100
                  PosParam.profitday = PosParam.profitday + PosParam.profitpr - profitpr_p
                  PosParam.profitdaybl = PosParam.profitdaybl + PosParam.profitpr - profitpr_p
                  tparam_renew1(6, PosParam.profitpr)
                  tparam_renew1(7)
                  if GParam.fldebug then
                    Msg2Log("\208\243\247\237\224\255 \241\228\229\235\234\224 \194\219\213\206\196 \239\238 \246\229\237\229 " .. tostring(PosParam.pricetrades) .. " \207\240\238\244\232\242" .. tostring(PosParam.profitpos), 1)
                  end
                end
                PosParam.currqty = currqty
                if 0 < PosParam.currqty then
                  PosParam.flaglong = true
                  PosParam.flagshort = false
                  tparam_renew1(3, PosParam.flaglong)
                elseif 0 > PosParam.currqty then
                  PosParam.flaglong = false
                  PosParam.flagshort = true
                  tparam_renew1(3, PosParam.flagshort)
                else
                  PosParam.flaglong = false
                  PosParam.flagshort = false
                  tparam_renew1(3)
                end
                tparam_renew1(4, PosParam.currqty)
                if PosParam.currqty == 0 then
                  if GParam.fldepominus then
                    if PosParam.profitpr < -1 * GParam.block_stp / PosParam.kfdepominus and 0 > PosParam.profitdaybl then
                      PosParam.fldepominus = true
                      PosParam.kfdepominus = PosParam.kfdepominus * GParam.kfdepominus
                      InitDepo()
                    elseif PosParam.profitpr > GParam.block_stp2 / PosParam.kfdepominus and 0 > PosParam.profitdaybl and 1 < PosParam.kfdepominus then
                      PosParam.kfdepominus = PosParam.kfdepominus / GParam.kfdepominus
                      if 1 > PosParam.kfdepominus then
                        PosParam.kfdepominus = 1
                      end
                      InitDepo()
                    elseif 0 < PosParam.profitdaybl then
                      PosParam.fldepominus = false
                      PosParam.kfdepominus = 1
                      InitDepo()
                    end
                  end
                  PosParam.pricestop = 0
                  PosParam.priceprofit = 0
                  PosParam.flagstopmade = false
                  PosParam.flagprofitmade = false
                  PosParam.currcountersc = 0
                  PosParam.aaperc = 0
                  PosParam.aapercsh = 0
                  PosParam.ssperc = 0
                  PosParam.pricepeak = 0
                  PosParam.stopshift = 0
                  PosParam.clplusqty = 0
                  PosParam.numpos = 0
                  flposclose = true
                  PosParam.timepos = os_time() + GParam.timepos
                  fltimepos = true
                  LevelWork()
                  PosParam.flagnull = true
                  PosParam.flagsl = true
                  PosParam.flagsl2 = true
                  PosParam.qtysl = 0
                  if flagsl then
                    SetCell(ta_id[1], 14, 2, tostring(PosParam.qtysl) .. " \232\231 " .. tostring(GParam.qtysl))
                  end
                  InitStopArr()
                  if PosParam.flcoupgate then
                    local trlvl = iif(sign == 1, 1, 2)
                    local j = 0
                    for i = 3, #level_arr do
                      if level_arr[i][7] == trlvl and level_arr[i][4] and 0 < level_arr[i][3] then
                        j = j + 1
                      end
                    end
                    if j > 0 then
                      if #level_arr > 2 then
                        trlvl = iif(sign == 1, 2, 1)
                        for i = 3, #level_arr do
                          if level_arr[i][7] == trlvl then
                            level_arr[i][4] = false
                            EditLevelTbl(i)
                          end
                        end
                      end
                    else
                      PosParam.flagwork = false
                      delalllevel_arr()
                    end
                  else
                    PosParam.flagwork = false
                    delalllevel_arr()
                  end
                end
                PosParam_save()
              end
            elseif fltimepos then
              SetColor(ta_id[2], 1, 1, GRAY, -1, GRAY, -1)
              fltimepos = false
            end
          end
          if PosParam.curr_day ~= os_date("%d") then
            PosParam.curr_day = os_date("%d")
            stoptimepos.b = 0
            stoptimepos.e = 0
            barpostime = 0
            numC = -1
            flagposstoplifetime_l = -1
            tparam_renew1(2, false)
            datetime = {}
            datetime = os_date("!*t", os.time())
            datetime.hour, datetime.min, datetime.sec = string_match(GParam.etstart, "(%d%d)%p(%d%d)%p(%d%d)")
            etstart = os_time(datetime)
            PosParam.fletstart = true
            PosParam.depoblock = 0
            PosParam.countblock = 0
            PosParam.profitday = 0
            if not PosParam.fldepominus then
              PosParam.profitdaybl = 0
            end
            PosParam.timeblock = 0
            getFutLimit()
            InitDepo()
            tparam_renew1(10, PosParam.depoblock)
            tparam_renew1(7)
            PosParam_save()
          end
          ME_GetSignals()
          if is_run then
            if PosParam.currqty ~= 0 then
              if 0 < PosParam.currqty then
                if PosParam.flagstop and not PosParam.flagstopmade then
                  PosParam.signalname = "CloseLongStop"
                  SetTrade("S", PosParam.stop_arr[PosParam.currcountersc][4], "MM")
                end
                if 0 < PosParam.currqty and PosParam.flbtlongclose then
                  btn_arr.fl = false
                  if 0 < btn_arr.qty then
                    PosParam.signalname = "CloseLongButton"
                    SetTrade("S", btn_arr.qty, "MM")
                  end
                end
                if 0 < PosParam.currqty and PosParam.flaglongadd then
                  PosParam.signalname = "CloseLongTrail"
                  SetTrade("S", PosParam.stopshift, "MM")
                end
                if 0 < PosParam.currqty and PosParam.flaglongclose then
                  PosParam.signalname = "CloseLong"
                  SetTrade("S", PosParam.currqty, "MM")
                end
              else
                if PosParam.flagstop and not PosParam.flagstopmade then
                  PosParam.signalname = "CloseShortStop"
                  SetTrade("B", PosParam.stop_arr[PosParam.currcountersc][4], "MM")
                end
                if 0 > PosParam.currqty and PosParam.flbtshortclose then
                  btn_arr.fl = false
                  if 0 < btn_arr.qty then
                    PosParam.signalname = "CloseShortButton"
                    SetTrade("B", btn_arr.qty, "MM")
                  end
                end
                if 0 > PosParam.currqty and PosParam.flagshortadd then
                  PosParam.signalname = "CloseShortTrail"
                  SetTrade("B", PosParam.stopshift, "MM")
                end
                if 0 > PosParam.currqty and PosParam.flagshortclose then
                  PosParam.signalname = "CloseShort"
                  SetTrade("B", -1 * PosParam.currqty, "MM")
                end
              end
            end
            if math_abs(PosParam.currqty) < PosParam.startqty[PosParam.tradedir] or btn_arr.fl then
              if startqty > 0 then
                if PosParam.flaglong then
                  PosParam.signalname = "OpenLong"
                  SetTrade("B", startqty, "M")
                elseif PosParam.flagshort then
                  PosParam.signalname = "OpenShort"
                  SetTrade("S", startqty, "M")
                end
              else
                if btn_arr.fl and GParam.fldebug then
                  Msg2Log("\196\238\241\242\232\227\237\243\242\238 \236\224\234\241\232\236\224\235\252\237\238\229 \247\232\241\235\238 \234\238\237\242\240\224\234\242\238\226. \209\225\240\238\241 \226\245\238\228\224 \239\238 \234\237\238\239\234\229.", 1)
                end
                btn_arr.fl = false
              end
            else
              if level_num > 0 and (PosParam.flaglong or PosParam.flagshort) then
                Msg2Log("\205\229\226\238\231\236\238\230\237\238 \226\238\233\242\232 \239\238 \243\240\238\226\237\254 " .. tostring(level_num) .. ". \202\238\237\242\240\224\234\242\251 " .. tostring(level_arr[level_num][3]) .. ". \207\238\236\229\247\224\229\236 \232\241\239\238\235\237\229\237\237\251\236.", 2)
                level_arr[level_num][4] = false
                EditLevelTbl(level_num)
              end
              btn_arr.fl = false
            end
          end
        end
      else
        sleep(1000)
      end
    end
    sleep(20)
    CheckLabels()
  end
  trans_active = nil
  GParam = nil
  PosParam = nil
  level_arr = nil
end
